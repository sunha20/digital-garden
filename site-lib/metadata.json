{"createdTime":1747968369106,"shownInTree":["dev-blog/dev-blog.html","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html","dev-blog/csapp/csapp.html","dev-blog/coding-test/10819.-차이를-최대로.html","dev-blog/coding-test/1074.-z.html","dev-blog/coding-test/9663.-n-queen.html","dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html","dev-blog/coding-test/1978.-소수-찾기.html","dev-blog/coding-test/9020.-골드바흐의-추측.html","dev-blog/coding-test/1065.-한수.html","dev-blog/coding-test/2628.-종이-자르기.html","dev-blog/coding-test/1914.-하노이-탑.html","dev-blog/coding-test/10971.-외판원-순회2.html","dev-blog/coding-test/2468.-안전지대.html","dev-blog/coding-test/coding-test.html","dev-blog/data-structure/data-structure.html","dev-blog/jungle/week-2.html","dev-blog/jungle/week-1.html","dev-blog/jungle/jungle.html","index.html"],"attachments":["site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/minisearch.js","site-lib/media/favicon.png","site-lib/styles/snippets.css","site-lib/styles/obsidian.css","site-lib/styles/other-plugins.css","site-lib/styles/theme.css","site-lib/styles/global-variable-styles.css","site-lib/styles/supported-plugins.css","site-lib/styles/main-styles.css","⁵-file/image/pasted-image-20250517110728.png","⁵-file/image/pasted-image-20250517163436.png","⁵-file/image/pasted-image-20250517164101.png","⁵-file/image/pasted-image-20250517170728.png","⁵-file/image/pasted-image-20250517172142.png","⁵-file/image/pasted-image-20250517190742.png","⁵-file/image/pasted-image-20250517193510.png","⁵-file/image/pasted-image-20250517210011.png","site-lib/rss.xml"],"allFiles":["dev-blog/jungle/week-2.html","dev-blog/dev-blog.html","index.html","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html","dev-blog/jungle/week-1.html","dev-blog/coding-test/1074.-z.html","dev-blog/coding-test/1065.-한수.html","dev-blog/jungle/jungle.html","dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html","dev-blog/coding-test/1978.-소수-찾기.html","dev-blog/coding-test/9020.-골드바흐의-추측.html","dev-blog/coding-test/2628.-종이-자르기.html","dev-blog/coding-test/1914.-하노이-탑.html","dev-blog/coding-test/10819.-차이를-최대로.html","dev-blog/coding-test/9663.-n-queen.html","dev-blog/coding-test/10971.-외판원-순회2.html","dev-blog/coding-test/2468.-안전지대.html","dev-blog/data-structure/data-structure.html","dev-blog/coding-test/coding-test.html","dev-blog/csapp/csapp.html","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/minisearch.js","site-lib/media/favicon.png","site-lib/styles/snippets.css","site-lib/styles/obsidian.css","site-lib/styles/other-plugins.css","site-lib/styles/theme.css","site-lib/styles/global-variable-styles.css","site-lib/styles/supported-plugins.css","site-lib/styles/main-styles.css"],"webpages":{"dev-blog/dev-blog.html":{"title":"Dev Blog","icon":"<svg class=\"svg-icon lucide-file\" stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\"></path><path d=\"M14 2v4a2 2 0 0 0 2 2h4\"></path></svg>","description":"<a data-tooltip-position=\"top\" aria-label=\"Dev Blog/new file.md\" data-href=\"Dev Blog/new file.md\" href=\"Dev Blog/new file\" class=\"internal-link is-unresolved\" target=\"_self\" rel=\"noopener nofollow\">new file</a> | <a data-tooltip-position=\"top\" aria-label=\"Dev Blog/new folder/new folder.md\" data-href=\"Dev Blog/new folder/new folder.md\" href=\"Dev Blog/new folder/new folder\" class=\"internal-link is-unresolved\" target=\"_self\" rel=\"noopener nofollow\">new folder</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Dev Blog","level":1,"id":"Dev Blog"},{"heading":"Note","level":3,"id":"Note"},{"heading":"File","level":3,"id":"File"}],"links":["Dev Blog/new file.md","Dev Blog/new folder/new folder.md","dev-blog/jungle/jungle.html","dev-blog/data-structure/data-structure.html","dev-blog/coding-test/coding-test.html","dev-blog/csapp/csapp.html"],"author":"","coverImageURL":"","fullURL":"dev-blog/dev-blog.html","pathToRoot":"..","attachments":[],"createdTime":1747966599472,"modifiedTime":1747972317228,"sourceSize":465,"sourcePath":"Dev Blog/Dev Blog.md","exportPath":"dev-blog/dev-blog.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html":{"title":"컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행","icon":"","description":"\n컴퓨터 시스템 = 하드웨어 + 시스템 소프트웨어\n작동하며 응용프로그램을 실행함.\n모든 컴퓨터 시스템은 유사한 기능을 수행하는 유사한 하드웨어와 소프트웨어 컴포넌트를 가지고 있다. 비트: 데이터\n컨텍스트: 해석방법\n⇒ 동일한 비트(데이터)가 컨텍스트에 따라 다르게 해석될 수 있음\n좋은 질문이야! 핵심을 짚었네.\n결론부터 말하자면:\n컨텍스트는 ‘항상 파일 안에 직접 쓰여 있는 건 아니고’, 보통은 ‘외부의 규칙’이나 ‘해석하는 프로그램/환경’이 제공해.\n일부 형식 있는 데이터는 스스로를 설명하기 위해 컨텍스트 정보를 내부에 포함해.\n이럴 땐 컨텍스트가 직접적으로 쓰여 있는 것이 맞아.예시:이런 경우는 컨텍스트가 비트/바이트 안에 포함된 경우라고 볼 수 있어.하지만 대부분의 경우, 비트 그 자체만 봐서는 해석할 수 없고,\n외부 환경, 프로세스, 해석자(program)가 그 의미를 부여해줘.예시:\n.txt 파일의 01000001 → 메모장에서 보면 \"A\"지만, hex editor에선 0x41\n0b1010 → 파이썬 코드에서는 2진수 10이지만, 그냥 텍스트 파일로 보면 단순한 문자열 \"0b1010\"\n메모리 안에 있는 8바이트 → 이걸 double로 볼지, int로 볼지는 CPU나 프로그래머가 결정 즉, 이 경우 컨텍스트는 파일 외부에 있어:\n파일 확장자\n프로그래밍 언어의 문법\n운영체제의 실행 규칙\n사용하는 소프트웨어 🔸 요약\n🔹 컨텍스트는 \"해석 기준\"이다.\n🔹 어떤 데이터는 그 기준을 스스로 안에 담기도 하고,\n🔹 어떤 데이터는 해석하는 주체(사람, 프로그램, OS)가 기준을 제공하기도 해.\n원하는 주제로 더 깊이 들어갈 수 있어! 예를 들어 \"컴파일러가 컨텍스트를 어떻게 이해하는가\", \"바이너리 파일 해석\", \"파이썬 인터프리터의 역할\" 같은 것도 연결해서 설명할 수 있어.\n컴파일 시스템 소스코드(원시코드)를 목적코드로 바꾸는 역할\n전처리기, 컴파일러, 어셈블러, 링커의 4단계를 실행하는 프로그램드을 합쳐서 컴파일 시스템이라고 함.\ne.g., GCC 컴파일러 드라이버: 소스파일 hello.c를 읽어서 실행파일인 hello로 번역. <img src=\"⁵-file/image/pasted-image-20250517110728.png\" target=\"_self\">\n시작 파일: 소스코드(.c) 사용 프로그램: 전처리기(cpp)\n<br>역할: #문자로 시작하는 디렉티브<a data-footref=\"1\" href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-1-95c3f254feb9cc1d\" class=\"footnote-link\" target=\"_self\" rel=\"noopener nofollow\">[1]</a>에 따라 파일을 수정 e.g., #includes&lt;studio.h&gt;: 시스템 헤더파일인 studio.h를 프로그램 문장에 직접 삽입하라는 뜻 결과파일: 수정된 소스코드 파일(.i) 사용 프로그램: 컴파일러(cc1)\n역할: 어셈블리어로 파일을 번역 어셈블리어는 기계어와 1:1 대응됨\n상위수준 언어 종류에 상관 없이 동일한 어셈블리어로 출력파일을 생성 결과파일: 어셈블리어 프로그램 파일(.s) 사용 프로그램: 어셈블러(as)\n역할: 어셈블리어 → 기계어 인스트럭션 ⇒ 결과 파일로…\n결과파일: 재배치가능 목적프로그램(.o) \"재배치 가능\"하다는 말은, 이 목적파일(hello.o) 안의 코드나 데이터가 메모리에서 최종적으로 어디에 위치할지 아직 정해지지 않았고, 나중에 자유롭게 위치를 조정할 수 있게 설계되어 있다는 뜻이야.**\n🔹 다시 말해:\n\"파일 자체가 이리저리 옮겨진다\"는 의미도 아니고,\n\"인스트럭션들이 뒤죽박죽 위치 바뀐다\"는 뜻도 아니야.\n대신, 이 의미는 메모리에 올려질 때 \"어디에 위치할 수 있는지 유연하다\"는 뜻이야. 🔹 예시:int main() { return 0;\n}\n이 코드가 컴파일되어 hello.o라는 목적파일이 만들어졌다고 해.\n여기에는 main 함수의 기계어 인스트럭션이 들어 있지만,\n“이 코드가 메모리 주소 0x400000부터 실행된다”는 정보는 아직 없음!\n나중에 링커가 여러 목적파일을 결합할 때, 이 main 함수가 0x400000에 올릴지, 0x500000에 올릴지는 그때 결정함.\n그래서 hello.o 안의 기계어 코드에는 이런 주소가 “심볼”로 남아 있음. (예: main이 아직 어딘지 모르므로 main → 심볼 테이블) 📌 즉, “재배치 가능”하다는 것은 이 목적파일 안의 주소들이 아직 \"결정되지 않았고, 나중에 링커가 마음대로 재배치할 수 있게 만들어진 상태”라는 뜻이야.\n사용 프로그램: 링커(ld)\n역할: 통합작업 이미 컴파일된 별도의 목적파일에 들어있는 심볼(함수, 변수 등)을 사용해야할 경우가 많음 e.g., 외부 함수 사용 이러한 심볼들을 연결하여 하나의 실행파일을 생성 결과파일: 실행 가능 목적파일(실행파일) 프로그램 성능 최적화 switch문은 if-else문을 연속해서 사용하는 것보다 언제나 더 효율적일까?\n함수 호출시 발생하는 오버헤드는 얼마나 되는가?\nwhile 루프는 for 루프보다 더 효율적일까?\n포인터 참조가 배열 인덱스보다 더 효율적인가?\n합계를 지역변수에 저장하면 팜조형태로 넘겨받은 인자를 사용하는 것보다 왜 루프가 더 빨리 실행되는가?\n수식 연산시 괄호를 단수히 재배치하기만 해도 함수가 더 빨리 실행되는 이유는 무엇인가? 링크에서 이해하기 링커아 어떤 참조를 풀어낼 수 없다고 할 때는 무엇을 의마하는가\n정적변수와 전역변수의 차이는 무엇?\n각기 다른 파일에 동일한 이름의 두 개의 전역변수를 정의한다면 무슨일이?\n정적 라이블리와 동적 라이브러리의 차이는?\n컴파일 명령을 쉘에서 입력할 때 명령어 라인의 라이브러리들의 순서는 무슨 의미가 있는가? 보안 약점 피하기 e.g., 버퍼 오버플로우 취약성.\n안전한 프로그래밍의 첫번째 → 스택에 데이터와 제어정보가 저장되는 방식의 영향 이해. 속도 빠른 순\n[CPU] └─ 레지스터 └─ 캐시 (L1 → L2 → L3)\n[메모리 계층] └─ RAM (주기억장치) └─ 버퍼 (I/O 대기용) └─ 디스크 (SSD/HDD 등)\n[외부저장소] └─ USB, 외장하드, 클라우드 저장소 CLI(Command-Line Interface) 사용자가 명령어를 입력해 컴퓨터와 상호작용하는 방식\nUI 방식 중 하나로 GUI(마우스, 버튼 등)와 반대 shell 사용자가 CLI를 쓸 수 있도록 운영체제와 사용자 사이를 중계하는 프로그램\n통역가와 같은 역할을함\n입력받는 명령어는 내장 쉘명령어 또는 실행파일의 이름임. 운영체제 명령을 실제 수행하는 주체 시스템 내를 과농하는 전기적 배선군\n컴포넌트들 간에 바이트 정보를 전송\n전송하는 정보는 word라는 고정 크기를 가짐\n→ 대개 4 bytes (32 bits) 나 8 bytes (64 bits) 시스템과 외부세계와의 연결을 담당.\ne.g., 키보드, 마우스, 출력용 디스플레이, 외부 디스크 드라이브\n<br>각 입출력 장치는 입출력 버스 + (컨트롤러 or 어댑터)를 통해 연결됨<a data-footref=\"2\" href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-2-95c3f254feb9cc1d\" class=\"footnote-link\" target=\"_self\" rel=\"noopener nofollow\">[2]</a> 컨트롤러: 디바이스 자체가 칩셋이거나 시스템의 인쇄기판에 장착\n어댑터: 마더보드의 슬롯에 장착되는 카드 프로세서가 프로그램을 실행하는 동안 데이터와 프로그램을 모두 저장하는 임시 저장장치\n물리적: DRAM칩들로 구성\n논리적: 연속적인 바이트들의 배열 → 각 byte들은 고유의 주소를 가짐.\n<br><a data-tooltip-position=\"top\" aria-label=\"https://computing-jhson.tistory.com/21\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://computing-jhson.tistory.com/21\" target=\"_self\">RAM 메모리 : DRAM vs SRAM</a>\nRAM: 어떤 메모리 주소에 접근(random access)하더라도 동일한 시간의 읽고 쓰기가 보장되어서 random access memory라고 부름 cf) 하드디스크 vs RAM 데이터 주소에 따라 접근 시간이 다름 → 헤드라는 장치를 이용해 플래터라는 원판에 데이터를 읽고 쓰는데, 플래터를 돌려 헤드를 해당주소로 옮겨야함. → 헤드 위치에 따라 접근 시간 달라짐.\nRAM은 전기를 저장하는 cell들의 배열(반도체 회로)로 구성→ cell의 전압정보를 읽어오는데 동일한 시간 소요 비용: SRAM &gt; DRAM\n속도: SRAM &gt; DRAM\n⇒ 메인메모리: DRAM = 주처리장치(CPU)\n메인 메모리에 저장된 인스트럭션들을 해독 및 실행하는 엔진\n프로그램 카운터(PC) 메인 메모리의 기계어 인스트럭션의 주솟값을 가짐\nWord크기의 저장장치임. → register내에 존재하기도 함. 프로세서는 프로그램 카운터가 가리키는 인스트럭션을 실행하고 PC값은 다음 인스트럭션의 위치로 값을 업데이트하는 행위를 반복함. 인스트럭션 실행: 메모리로부터 인스트럭션 읽어오기(Fetch)\n인스트럭션 해석하기(Decode)\n인스트럭션 실행하기(Execute) 인스트럭션 예시: 적재(Load): 메인 메모리 → 레지스터\n저장(Store): 레지스터 → 메인 메모리\n작업(Operate): 두 레지스터 값 가지고 ALU에서 연산을 수행하고 결과 값을 저장(덮어쓰기)\n점프(Jump): 인스트럭션 자신으로부터 한 개의 워드를 추출 하고 이것을 PC에 덮어쓰기함. <br><img src=\"⁵-file/image/pasted-image-20250517163436.png\" target=\"_self\">\n원인1. 데이터 복사 및 이동에 많은 시간이 소요 → 실제 작업 속도를 저해 빠른 복사와 빠른 이동이 중요해짐 원인2. 프로세서의 속도 향상이 메모리의 속도 향상보다 더 쉽고 더 쌈. 프로세서와 메모리 간의 속도 격차가 발생 “캐시”: 작으면서 빠른 캐시 메모리를 고안 단기간에 프로세서에서 사용할 가능성이 높은 데이터들을 임시 저장해둠.\n<br><a class=\"internal-link\" data-href=\"컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행.md#✅RAM\" href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#✅RAM\" target=\"_self\" rel=\"noopener nofollow\">SRAM</a>을 사용 <br><img src=\"⁵-file/image/pasted-image-20250517164101.png\" target=\"_self\">\n주요 아이디어는 한 레벨의 저장장치가 다음 하위레벨 저장장치의 캐시 역할을 한다는 것\n<br><img alt=\"Pasted image 20250517170728.png\" src=\"⁵-file/image/pasted-image-20250517170728.png\" style=\"width: 530px; max-width: 100%;\" target=\"_self\">\n운영체제: 하드웨어와 소프트 웨어 사이에 위치한 소프트웨어 계층\n응용프로그램이 하드웨어를 사용하려면 무조건 운영체제를 거쳐야함 Why? 제멋대로 동작하는 응용프로그램들이 하드웨어를 잘못사용하는 것을 방지 <br>메모리 주소를 잘못 참조하면 → 다른 프로그램 메모리를 침범할 수 있어<a data-footref=\"3\" href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-3-95c3f254feb9cc1d\" class=\"footnote-link\" target=\"_self\" rel=\"noopener nofollow\">[3]</a>\n프린터를 동시에 여러 앱이 사용하면 → 출력 충돌이 날 수 있어\n저장장치를 잘못 쓰면 → 파일 손상 발생\nCPU를 혼자 다 쓰는 프로그램이 있으면 → 다른 프로그램이 멈춤 단순하고 균일한 매커니즘을 사용하여 복잡하고 매우 다른 저수준 하드웨어 장치들을 조작할 수 있도록 하기위해 종류, 제조사마다 모두 동작 방식이 다 달라\n이걸 응용프로그램이 직접 처리해야 한다면? → 너무 복잡하고 오류 많음\ne.g., 파일을 읽고싶으면, 해당파일을 그냥 지정해주면 됨. 그 파일이 SDD에 있든, USB에 있든 상관 없음 위의 목적을 추상화를 통해 달성 → 맘대로 접근하지 못하게 숨겨놓음\n추상화 형태 <br><img src=\"⁵-file/image/pasted-image-20250517172142.png\" target=\"_self\">\n파일: 입출력 장치의 추상화\n가상 메모리: 메인메모리와 입출력 장치의 추상화\n프로세스: 프로세서, 메인메모리, 입출력장치 전체의 추상화 <br>\n환상 → 한개의 프로그램만 실행되는 것 같고, 그 프로그램이 모든 시스템<a data-footref=\"4\" href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-4-95c3f254feb9cc1d\" class=\"footnote-link\" target=\"_self\" rel=\"noopener nofollow\">[4]</a> 자원을 독차지 하는 것처럼 보임 ⇒ 프로세스라는 개념을 통해 가능 프로그램: 정적인 코드. 디스크에 저장된 실행파일 프로세스: 실행 중인 프로그램의 인스턴스. 여러 자원을 사용중 프로세스라는 객체는 실행되는 데 필요한 모든 상태정보(컨텍스트)를 가지고, 그 변화를 추적함 단일 프로세서의 경우, 한 순간에 한개의 프로세스 코드만 실행 할 수있음\n문맥전환: os가 현재 프로세스에서 다른 프로세스로 제어를 옮기려고 할 때, 현재 프로세스의 컨텍스트를 저장하고 새프로세스의 컨텍스트를 복원시키는 방법\n문맥의 전환을 통해 프로세스는 중단된 그 상태에서부터 다시 실행될 수 있음. 프로세스A: 쉘\n프로세스B: hello 프로세스\n<br><img src=\"⁵-file/image/pasted-image-20250517190742.png\" target=\"_self\">\n각각의 제어권이 이동함\n<br>운영체제(커널)로 제어권을 넘겨줄 때는 시스템 콜<a data-footref=\"5\" href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-5-95c3f254feb9cc1d\" class=\"footnote-link\" target=\"_self\" rel=\"noopener nofollow\">[5]</a>을 이용\n커널모드에서는 종료된 프로세스의 상태를 저장하고 실행할 프로세스를 선택 후 사용자 모드로 전환함\ndisk interrupt: 디스크에서 메모리로 전송됐음을 의미 커널은 별도의 프로세스가 아니다\n프로세스를 관리하는 운영체제에 속한 별도의 코드임\n이러한 커널이 실행되려면 시스템 콜이 발생하거나\n키보드 입력과 같은 인터럽트가 발생하거나\n프로세스 스케줄링이 필요한 경우 등 → 커널의 실행은 프로세스 전환이 아니라, 모드 전환이자 제어권의 위임임. 프로세스를 구성하는 다수의 실행 유닛\n쓰레드는 해당하는 프로세스의 컨텍스트에서 실행되며 동일한 코드와 전역데이터를 공유함. → 다수의 프로세스들보다 공유가 더 쉽다 +) CPU는 항상 스레드 단위로 실행하고 스레드 간의 전환이 일어나는데, 그게 같은 프호세스 안의 스레드라면 가벼운 전환, 다른 프로세스의 스레드라면 문맥 전환이 되는 것임.\n<br><img alt=\"Pasted image 20250517193510.png\" src=\"⁵-file/image/pasted-image-20250517193510.png\" style=\"width: 340px; max-width: 100%;\" target=\"_self\">\n각 프로세스들이 메인 메모리 전체를 독점적으로 사용하고 있는 것같은 환상을 제공하는 추상화\n각 프로세스는 가상 주소 공간이라고 하는 균일한 메모리의 모습을 가짐.\n운영체제가 이 가상 주소공간을 실제 저장 위치(RAM, Disk)와 매핑해줌\n구성 프로그램 코드/데이터: 코드: 모든 프로세스들이 같은 가상 주소에서 시작함.\n데이터: 코드 다음에 전역변수와 정적변수들이 저장됨 cf) 지역변수: 스택\ncf) 동적 할당 변수: 힙 힙 동적으로 크기가 변화함.\n실행 중 동적으로 생성된 데이터가 저장되는 공간 공유라이브러리 중간정도 위치\n표준 라이브러리나 수학 라이브러리같은 공유라이브러리의 코드와 데이터 스택 맨위에 위치\n컴파일러가 함수 초룩을 구현하기 위해 사용하는 공간\n동적으로 크기 변화 커널 가상메모리 가장 윗부분\n커널을 위해 예약된 공간\n응용프로그램이 읽고 쓸 수 없으며 호출도 금지됨. 모든 I/O 자원을 추상화한 공통 인터페이스\n단순히 연속된 바이트들을 의미함\n모든 입출력은 파일을 읽고 쓰는 형태로 이루어짐 → 유닉스 I/O라는 시스템 콜들을 이용. 개별시스템의 관점에서 네트워크는 단지 또다른 입출력 장치로 볼 수 있다. 이메일, 메신저, 웹 페이지, FTP, telnet → 네트워크를 통해 정보를 복사하는 기능 이용 실행 예시 telnet 클라이언트, “hello” 입력하고 엔터\n클라이언트 프로그램, 입력값을 네트워크를 거쳐 telnet 서버로 보냄\ntelnet 서버, 네트워크에서 문자열 받아서 원격 쉘프로그램에 전달\n원격 쉘, hello 프로그램 실행 후 출력을 서버로 전달\ntelnet 서버, 네트워크를 거쳐 출력 스트링을 telnet 클라이언트로 전달\ntelnet 클라이언트 프로그램, 출력 스트링을 로컬 터미널에 표시 한 시스템의 일부분의 성능을 개선할 때, 전체 시스템 성능에 대한 효과는 그 부분이 얼마나 중요한가와 이부분이 얼마나 빨라졌는가에 관계됨\n전체 시스템을 상당히 빠르게 하기 위해서는 전체 시스템의 매우 큰 부분의 성능을 개선해야한다.\n그 성능을 무시할 수 있을 정도의 시간이 걸리는 지점까지 속도를 올려도 두드러지는 성능개선이 되지 않을 수도 있다.\n⇒ 생각보다 성능 개선이 어렵다. 컴퓨터 발전의 큰 2가지 요구: 더 많은 일, 더 빠른 실행 ⇒ 프로세서가 한번에 더 많은 일을 할 때 개선\n동시성: 다수의 동시에 벌어지는 일을 갖은 시스템에 관한 일반적인 개념\n병렬성: 동시성을 사용해서 시스템을 보다 빠르게 동작하도록 하는 것 → 컴퓨터 시스템의 다양한 수준의 추상화에 활용 가능 한 개의 프로세스 내에서 실행되는 다수의 제어 흐름을 가질 수 있음. 초기: 시분할(시간 공유)을 기반으로한 시뮬레이션 형태 ⇒ 단일 프로세서 시스템 한 개의 컴퓨터가 실행하는 프로세스를 빠르게 전환하는 방법\n다수의 사용자들이 한 시스템과 동시 교신 가능 예시: 3명의 사용자가 SSH로 접속 중 사용자 A가 명령어 입력 중\n사용자 B가 코드를 컴파일 중\n사용자 C가 파일 다운로드 중\n→ OS는 이들의 프로세스를 빠르게 교체하며 CPU를 돌려줌\n→ 사용자 입장에선 “내 프로그램이 계속 실행 중”처럼 보임\n→ 실제로는 CPU가 순차적으로 처리 중 한 명의 사용자가 다수의 태스크에 동시에 연관 가능 IDE(통합 개발 환경) 같은 프로그램은 동시에: 코드 작성\n실시간 오류 검사\n백그라운드 저장\n자동 완성\n을 실행 중인데,\n→ 이건 내부적으로 여러 스레드로 분리돼서 동시에 실행되는 것처럼 보이는 것이야\n운영체제가 각 스레드를 빠르게 전환하며 실행함으로써\n→ 사용자는 “다중 작업을 동시에 하고 있다”고 인식하게 돼 멀티 프로세서 시스템 여러개의 프로세서를 가지고 하나의 웅영체제 제어하에 동작하는 경우\n멀티 코어 <br><img alt=\"Pasted image 20250517210011.png\" src=\"⁵-file/image/pasted-image-20250517210011.png\" style=\"width: 300px; max-width: 100%;\" target=\"_self\">\n여러개의 CPU를 하나의 집적화된 칩에 내장. 멀티 쓰레드(하이퍼 쓰레드) 하나의 CPU가 여러개의 제어흐름을 실행할 수 있게 해주는 기술\n프로그램 카운터나 레지스터 파일 등 → 여러개\n다른 부분 (e.g., 부동소수 연산기) → 한 개\n기존에 쓰레드 간의 전환에 드는 시간이 약 2만 클럭사이클이었다면, 매싸이클마다 실행할 쓰레드를 결정할 수 있게됨. 다수의 태스크를 실행할 때, 동시성 시뮬레이션할 필요를 줄여줌 이제 CPU가 여러개라 동시에 처리할 수 있으니, 동시성처럼 보이게 시뮬레이션 할 필요가 없음 멀티 코어를 쓴다고 모든 프로그램이 빨라지는 것은 아님. 프로그램이 멀티 스레드 구조여야 병렬처리로 속도가 빨라질 수 있음. 멀티 코어: 여러 프로그램을 동시에 실행\n멀티 쓰레드: 하나의 프로그램을 병렬 처리. 여러개의 인스트럭션을 한번에 실행할 수 있음\n파이프라이닝 기법, 슈퍼스케일러 프로세서 등이 여기에 해당. 한개의 인스트럭션이 병렬로 다수의 연산을 수행할 수 있는 특수 하드웨어.\n영상, 소리, 동영상 데이터 처리 및 머신러닝 분야에서 많이 사용됨.\n(여러 개의 연산을 숨기고, 사용자에겐 “하나의 명령처럼 보이게” 만드는 추상화) ISA: 실제 프로세서 하드웨어의 추상화\n마치 한번에 하나의 인스트럭션을 실행하는 프로세서인 것처럼 보이게 함.\n실제로는 파이프라이닝, out-of-order, 분기 예측, 병렬 유닛 등 뭐가 많지만, 신경 쓰지 않아도됨 가상머신 운영체제, 프로세서, 프로그램 모두를 포함하는 컴퓨터 전체의 추상화를 제공.\n하드웨어가 실제로 존재하지 않아도 있는 것처럼 \"흉내 내는\" 소프트웨어 컴퓨터\n운영체제, CPU, 메모리, 저장공간, 프로그램 실행 환경까지 모두 가짜로 만든 컴퓨터 환경 <br>C언어에서 디렉티브는&nbsp;컴파일러에게 지시를 내리기 위해 사용하는 전처리 지시문을 의미함<a href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-1-95c3f254feb9cc1d\" class=\"footnote-backref footnote-link\" target=\"_self\" rel=\"noopener nofollow\">↩︎</a>\n<br>이해 다 못함.<a href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-2-95c3f254feb9cc1d\" class=\"footnote-backref footnote-link\" target=\"_self\" rel=\"noopener nofollow\">↩︎</a>\nQ: 실행파일(=목적코드) 안에 메모리 주소가 이미 써 있는데, 실행 중에 “주소를 잘못 참조한다”는 건 그럼 무슨 뜻?<br>\nA:실행파일에 들어 있는 주소는 보통 \"가상 주소(virtual address)\"이고, 이걸 실제 메모리 주소로 매핑(mapping)해주는 건 운영체제(OS)야<a href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-3-95c3f254feb9cc1d\" class=\"footnote-backref footnote-link\" target=\"_self\" rel=\"noopener nofollow\">↩︎</a>\n<br>컴퓨터 전체 환경<a href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-4-95c3f254feb9cc1d\" class=\"footnote-backref footnote-link\" target=\"_self\" rel=\"noopener nofollow\">↩︎</a>\n<br>사용자 프로그램이 운영체제의 기능을 요청할 때 사용하는 인터페이스.<a href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-5-95c3f254feb9cc1d\" class=\"footnote-backref footnote-link\" target=\"_self\" rel=\"noopener nofollow\">↩︎</a>\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행","level":1,"id":"컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행"},{"heading":"컴퓨터 시스템으로의 여행","level":2,"id":"컴퓨터_시스템으로의_여행"},{"heading":"1.1 정보는 비트와 컨텍스트로 이루어진다.","level":3,"id":"1.1_정보는_비트와_컨텍스트로_이루어진다."},{"heading":"✅ 컨텍스트는 어디에서 주어지는 것인가?","level":5,"id":"✅_컨텍스트는_어디에서_주어지는_것인가?"},{"heading":"✅ 1. 컨텍스트가 파일 안에 명시적으로 있는 경우","level":6,"id":"✅_1._**컨텍스트가__파일_안에_명시적으로__있는_경우**"},{"heading":"✅ 2. 컨텍스트가 외부에서 주어지는 경우","level":6,"id":"✅_2._**컨텍스트가__외부에서_주어지는__경우**"},{"heading":"🧠 정리하자면","level":6,"id":"🧠_정리하자면"},{"heading":"1.2 프로그램은 다른 프로그램에 의해 다른 형태로 번역된다.","level":3,"id":"1.2_프로그램은_다른_프로그램에_의해_다른_형태로_번역된다."},{"heading":"각 단계","level":4,"id":"각_단계"},{"heading":"전처리 단계","level":5,"id":"전처리_단계"},{"heading":"컴파일 단계","level":5,"id":"컴파일_단계"},{"heading":"어셈블리 단계","level":5,"id":"어셈블리_단계"},{"heading":"✅ 1. ‘재배치 가능 목적 프로그램’에서 ‘재배치’란?","level":6,"id":"✅_1._‘재배치_가능_목적_프로그램’에서_‘재배치’란?"},{"heading":"링크 단계","level":5,"id":"링크_단계"},{"heading":"메모리 적재 후 실행","level":5,"id":"메모리_적재_후_실행"},{"heading":"1.3 컴파일 시스템 이해가 중요한 이유","level":3,"id":"1.3_컴파일_시스템_이해가_중요한_이유"},{"heading":"✅ 기억장치","level":3,"id":"✅_기억장치"},{"heading":"1.4 프로세서는 메모리에 저장된 인스트럭션을 읽고 해석한다.","level":3,"id":"1.4_프로세서는_메모리에_저장된_인스트럭션을_읽고_해석한다."},{"heading":"✅ 쉘과 CLI","level":4,"id":"✅_쉘과_CLI"},{"heading":"하드웨어 구성 요소","level":4,"id":"하드웨어_구성_요소"},{"heading":"Bus","level":5,"id":"Bus"},{"heading":"입출력 장치","level":5,"id":"입출력_장치"},{"heading":"메인 메모리","level":5,"id":"메인_메모리"},{"heading":"✅RAM","level":6,"id":"✅RAM"},{"heading":"프로세서","level":5,"id":"프로세서"},{"heading":"프로그램 실행 개괄 → hello 프로그램 실행","level":4,"id":"프로그램_실행_개괄_→_hello_프로그램_실행"},{"heading":"1.5 캐시가 중요하다","level":3,"id":"1.5_캐시가_중요하다"},{"heading":"1.6 저장장치들은 계층구조를 이룬다","level":3,"id":"1.6_저장장치들은_계층구조를_이룬다"},{"heading":"1.7 운영체제는 하드웨어를 관리한다.","level":3,"id":"1.7_운영체제는_하드웨어를_관리한다."},{"heading":"추상화","level":4,"id":"추상화"},{"heading":"프로세스","level":5,"id":"프로세스"},{"heading":"작동 방식: 문맥 전환(Context Switching)","level":6,"id":"작동_방식_**문맥_전환**(Context_Switching)"},{"heading":"작동 예시","level":6,"id":"작동_예시"},{"heading":"커널","level":6,"id":"커널"},{"heading":"쓰레드","level":5,"id":"쓰레드"},{"heading":"가상메모리","level":5,"id":"가상메모리"},{"heading":"파일","level":5,"id":"파일"},{"heading":"1.8 시스템은 네트워크를 통해 다른 시스템과 통신한다","level":3,"id":"1.8_시스템은_네트워크를_통해_다른_시스템과_통신한다"},{"heading":"1.9 중요한 주제들","level":3,"id":"1.9_중요한_주제들"},{"heading":"Amdahl의 법칙","level":4,"id":"Amdahl의_법칙"},{"heading":"동시성과 병렬성","level":4,"id":"동시성과_병렬성"},{"heading":"쓰레드 수준 동시성","level":5,"id":"쓰레드_수준_동시성"},{"heading":"인스트럭션 수준 병렬성","level":5,"id":"인스트럭션_수준_병렬성"},{"heading":"싱글 인스트럭션, 다중 데이터 병렬성(SIMD)","level":5,"id":"싱글_인스트럭션,_다중_데이터_병렬성(SIMD)"},{"heading":"추가적인 추상화","level":4,"id":"추가적인_추상화"}],"links":["dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-1-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-2-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#✅RAM","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-3-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-4-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fn-5-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-1-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-2-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-3-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-4-95c3f254feb9cc1d","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html#fnref-5-95c3f254feb9cc1d"],"author":"","coverImageURL":"","fullURL":"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html","pathToRoot":"../..","attachments":["⁵-file/image/pasted-image-20250517110728.png","⁵-file/image/pasted-image-20250517163436.png","⁵-file/image/pasted-image-20250517164101.png","⁵-file/image/pasted-image-20250517170728.png","⁵-file/image/pasted-image-20250517172142.png","⁵-file/image/pasted-image-20250517190742.png","⁵-file/image/pasted-image-20250517193510.png","⁵-file/image/pasted-image-20250517210011.png"],"createdTime":1747966660132,"modifiedTime":1747967655090,"sourceSize":27451,"sourcePath":"Dev Blog/CSAPP/컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행.md","exportPath":"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/csapp/csapp.html":{"title":"CSAPP","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"CSAPP","level":1,"id":"CSAPP"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/csapp/csapp.html","pathToRoot":"../..","attachments":[],"createdTime":1747966729672,"modifiedTime":1747966730400,"sourceSize":74,"sourcePath":"Dev Blog/CSAPP/CSAPP.md","exportPath":"dev-blog/csapp/csapp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/10819.-차이를-최대로.html":{"title":"10819. 차이를 최대로","icon":"","description":"N개의 정수로 이루어진 배열 A가 주어진다. 이때, 배열에 들어있는 정수의 순서를 적절히 바꿔서 다음 식의 최댓값을 구하는 프로그램을 작성하시오.|A[0] - A[1]| + |A[1] - A[2]| + ... + |A[N-2] - A[N-1]|첫째 줄에 N (3 ≤ N ≤ 8)이 주어진다. 둘째 줄에는 배열 A에 들어있는 정수가 주어진다. 배열에 들어있는 정수는 -100보다 크거나 같고, 100보다 작거나 같다.첫째 줄에 배열에 들어있는 수의 순서를 적절히 바꿔서 얻을 수 있는&nbsp;식의 최댓값을 출력한다.제일 어려웠던 문제 중에 하나.from itertools import permutations N = int(input()) numList = list(map(int, input().split(\" \"))) max = 0 # 순열 구하기 for per in permutations(numList, N): total = 0 for i in range(N-1): total += abs(per[i] - per[i+1]) if total &gt; max: max = total print(max) 리스트의 모든 값을 사용하는 순열 전부를 구해서(for per in permutations(numList, N):)\n각 순열 별로 문제에서 주워진 수식을 계산한 후 max값을 찾음.\n# 입력 받기\nn = int(input())\nnumbers = list(map(int, input().split())) # 정렬\nnumbers.sort() # 차이의 합 계산\nans = 0\nmid = n // 2 # 절반씩 번갈아 계산\nfor i in range(mid): ans += numbers[n - i - 1] - numbers[i] # 총합의 두 배\nans *= 2 # 중앙 값 처리 (홀수/짝수 구분)\nif n % 2 == 1: ans -= min(numbers[mid] - numbers[mid - 1], numbers[mid + 1] - numbers[mid])\nelse: ans -= numbers[mid] - numbers[mid - 1] # 결과 출력\nprint(ans)\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"10819. 차이를 최대로","level":1,"id":"10819. 차이를 최대로"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"풀이","level":3,"id":"풀이"},{"heading":"완전탐색으로 풀기","level":4,"id":"완전탐색으로_풀기"},{"heading":"내가 원래 풀고 싶었던 풀이","level":4,"id":"내가_원래_풀고_싶었던_풀이"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/10819.-차이를-최대로.html","pathToRoot":"../..","attachments":[],"createdTime":1747967132371,"modifiedTime":1747967133468,"sourceSize":2070,"sourcePath":"Dev Blog/Coding Test/10819. 차이를 최대로.md","exportPath":"dev-blog/coding-test/10819.-차이를-최대로.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/1074.-z.html":{"title":"1074. Z","icon":"","description":"한수는 크기가 2N&nbsp;× 2N인 2차원 배열을 Z모양으로 탐색하려고 한다. 예를 들어, 2×2배열을 왼쪽 위칸, 오른쪽 위칸, 왼쪽 아래칸, 오른쪽 아래칸 순서대로 방문하면 Z모양이다.<img alt=\"\" src=\"https://u.acmicpc.net/21c73b56-5a91-43aa-b71f-9b74925c0adc/Screen%20Shot%202020-12-02%20at%208.09.46%20AM.png\" referrerpolicy=\"no-referrer\" style=\"width: 200px; max-width: 100%;\" target=\"_self\" class=\"is-unresolved\">N &gt; 1인 경우, 배열을 크기가 2N-1&nbsp;× 2N-1로 4등분 한 후에 재귀적으로 순서대로 방문한다.다음 예는 22&nbsp;× 22&nbsp;크기의 배열을 방문한 순서이다.<br><img alt=\"\" src=\"https://u.acmicpc.net/adc7cfae-e84d-4d5c-af8e-ee011f8fff8f/Screen%20Shot%202020-12-02%20at%208.11.17%20AM.png\" referrerpolicy=\"no-referrer\" style=\"width: 300px; max-width: 100%;\" target=\"_self\" class=\"is-unresolved\">N이 주어졌을 때, r행 c열을 몇 번째로 방문하는지 출력하는 프로그램을 작성하시오.다음은 N=3일 때의 예이다.<br><img alt=\"\" src=\"https://u.acmicpc.net/d3e84bb7-9424-4764-ad3a-811e7fcbd53f/Screen%20Shot%202020-12-30%20at%2010.50.47%20PM.png\" referrerpolicy=\"no-referrer\" style=\"width: 350px; max-width: 100%;\" target=\"_self\" class=\"is-unresolved\">첫째 줄에 정수 N, r, c가 주어진다.r행 c열을 몇 번째로 방문했는지 출력한다.\n1 ≤ N ≤ 15\n0 ≤ r, c &lt; 2N\ndef Z(n, r, c): global cnt if r == R and c == C: print(cnt) exit() if n == 0: cnt += 1 return i = 2**(n-1) Z(n-1, r, c) Z(n-1, r, c+i) Z(n-1, r+i, c) Z(n-1, r+i, c+i) return N, R, C = map(int, input().split()) # 2의 N승 cnt = 0 Z(N, 0, 0) Z(n, r, c)의 역할: 위치 (r,c)에 도달할 때까지, 주어진 정사각형을 4칸으로 쪼개며 Z모양으로 방문함. 전역변수 cnt: 이동 횟수 매개 변수 n: 정사각형 한 변의 길이가 2^n일 때 이 n의 값\nr, c: 목적지 좌표 내부 동작 만일 좌표에 도달했으면(if r == R and c == C: ), 지금까지 누적된 이동 횟수(cnt)를 출력하고 프로그램 종료(exit() )\n만일 영역이 다 쪼개져서 1칸 (1x1)에 도달하면, 그 위치로 이동한 것이기 때문에, cnt += 1을 하고 return\n다 아니라면, 영역을 4분의 1로 쪼개서 다시 Z함수 호출 각 변 길이 2^n의 n값은 1이 줄어들어야함 (ex. 4였던 것이 2가 되어야함.)\n호출 순서는 왼쪽 위, 오른쪽 위, 왼쪽 아래, 오른쪽 아래 순이다. n == 0까지 가는 게 아니라, n == 1로 뭉뚱그리고 그 중에서 r,c의 위치를 체크(checkRC(r,c))해서 값을 더해주는 방법으로 하면 어떨까?\ndef Z(n, r, c): global cnt if n == 1: if R-1&lt;=r&lt;=R and C-1&lt;=c&lt;=C: print(cnt + checkRC(r,c)) exit() else: cnt += 4 return i = 2**(n-1) Z(n-1, r, c) Z(n-1, r, c+i) Z(n-1, r+i, c) Z(n-1, r+i, c+i) return def checkRC(r, c): if r == R and c == C: return 0 elif r == R and c == C+1: return 1 elif r == R+1 and c == C: return 2 else: return 3 N, R, C = map(int, input().split()) # 2의 N승 cnt = 0 Z(N, 0, 0)\ndef Z(n, r, c): global cnt if r == R and c == C: print(cnt) exit() i = 2 ** (n-1) haveRC(n-1, r, c) # 1사분면 haveRC(n-1, r, c+i) # 2사분면 haveRC(n-1, r+i, c) # 3사분면 haveRC(n-1, r+i, c+i) # 4사분면 return def haveRC(n, r, c): # 해당 범위에 target이 있는지 없는지 global cnt i = 2**n if (r &lt;= R &lt; r+i) and (c &lt;= C &lt; c+i): # 있으면 탐색 Z(n, r, c) else: cnt += (i*i) # 없으면 해당 범위 넓이 만큼 더함 N, R, C = map(int, input().split()) cnt = 0 Z(N, 0, 0) Z(n, r, c)의 역할: 위치 (r,c)에 도달할 때까지, 주어진 정사각형을 4칸으로 쪼개며 Z모양으로 방문함. → +) 직접 방문하는 게 아니라 이동 횟수만 카운트해서 더하는 방식으로 수정 (r, c)가 속하지 않은 영역의 경우 이동 횟수만 카운트\n(r, c)가 속한 영역의 경우 원래처럼 탐색하기. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"1074. Z","level":1,"id":"1074. Z"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"제한","level":4,"id":"제한"},{"heading":"풀이","level":3,"id":"풀이"},{"heading":"실패: 시간 초과","level":4,"id":"실패_시간_초과"},{"heading":"시간 초과 해결 아이디어 1 → 실패","level":4,"id":"시간_초과_해결_아이디어_1_→_실패"},{"heading":"성공","level":4,"id":"성공"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/1074.-z.html","pathToRoot":"../..","attachments":[],"createdTime":1747967448873,"modifiedTime":1747967450516,"sourceSize":4728,"sourcePath":"Dev Blog/Coding Test/1074. Z.md","exportPath":"dev-blog/coding-test/1074.-z.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/9663.-n-queen.html":{"title":"9663. N-Queen","icon":"","description":"N-Queen 문제는&nbsp;크기가 N × N인 체스판 위에 퀸 N개를&nbsp;서로 공격할 수 없게 놓는&nbsp;문제이다.N이 주어졌을 때, 퀸을 놓는 방법의 수를 구하는 프로그램을 작성하시오.첫째 줄에 N이 주어진다. (1 ≤ N &lt; 15)첫째 줄에 퀸 N개를 서로 공격할 수 없게 놓는&nbsp;경우의 수를 출력한다.def n_queen(x, y): # 부분1 if checkY[y] == 1: return 0 if (addList[x+y] == 1): return 0 if (minusList[x-y+N] == 1): return 0 # 부분 2 cnt = 0 queens[x][y] = 1 checkY[y] = 1 addList[x+y] = 1 minusList[x-y+N] = 1 # 부분 3 if x == N-1: addList[x + y] = 0 minusList[x - y + N] = 0 checkY[y] = 0 queens[x][y] = 0 return 1 # 부분 4 for i in range(N): cnt += n_queen(x+1, i) # 부분 5 checkY[y] = 0 addList[x + y] = 0 minusList[x - y + N] = 0 queens[x][y] = 0 return cnt N = int(input()) queens = [[0 for _ in range(N)] for _ in range(N)] checkY = [0 for _ in range(N)] addList = [0 for _ in range(2*N)] minusList = [0 for _ in range(2*N)] sum = 0 for y in range(N): sum += n_queen(0,y) print(sum) n_queen(x, y): 주어진 x, y값에 queen을 놓을 수 있는 지 없는 지를 판별하고, 놓을 수 있다면 다음 줄로 넘어감. 부분 1: x, y값에 queen을 놓을 수 없으면 return 0\n부분 2: x, y에 queen 놓기\n부분 3: 만일 마지막 줄인 경우, 놓았던 queen을 되돌리고 return 1\n부분 4: 다음 줄에 처음부터 끝까지 queen을 배치해보기 위해 n_queen() 재귀호출하고 호출의 return 값을 cnt에 누적\n부분 5: 놓았던 queen을 되돌리고 누적된 cnt를 반환. 실패 원인: 함수 호출이 너무 많음 def n_queen(i): if (i == N): return 1 cnt = 0 for j in range(N): if checkCol[j] == 0 and checkDiagAdd[i+j] == 0 and checkDiagMinus[i-j+N] == 0: checkCol[j] = checkDiagAdd[i+j] = checkDiagMinus[i-j+N] = 1 cnt += n_queen(i+1) checkCol[j] = checkDiagAdd[i+j] = checkDiagMinus[i-j+N] = 0 return cnt N = int(input()) checkCol = [0] * N checkDiagAdd = [0] * (2*N) checkDiagMinus = [0] * (2*N) print(n_queen(0)) 수정 굳이 체스판(queens)을 사용할 필요 없어서 제거 → 이미 필요한 정보는 다른 배열들에 저장되어있음\n함수 n_queen()의 역할이 살짝 수정됨 해당 줄(i)에 각 칸에 퀸을 넣을 수 있는지 없는지를 판별하고 다음 줄로 넘어감\n기준이 칸이 아니라 줄로 변경되어 함수 호출 횟수가 줄어듬.\n줄 기준이 가능 한 이유는 줄별로 무조건 1개의 queen만을 놓아야하기 때문임. 2번으로 인해 함수 n_queen()이 필요로하는 매개 변수가 x, y 두 개에서 i한개로 변함. 풀이 n_queen()의 역할: 해당 줄(i)의 특정 칸 (j)에 queen을 놓을 수 있는 지 판별 만일 끝까지 queen을 놓으면서 끝에 도달했다면, 1을 반환 → if (i == N): return 1\n아직 끝이 아니라면 각 칸별로 놓을 수 있는지 판별\n→ if checkCol[j] == 0 and checkDiagAdd[i+j] == 0 and checkDiagMinus[i-j+N] == 0: 놓을 수 있다면 놓은 후 → checkCol[j] = checkDiagAdd[i+j] = checkDiagMinus[i-j+N] = 1\n다음 줄(i+1)로 넘어가 같은 작업 반복 → cnt += n_queen(i+1) 완료하고 받아온 return값을 cnt에 저장하고\n놓았던 queen을 회수함 → checkCol[j] = checkDiagAdd[i+j] = checkDiagMinus[i-j+N] = 0 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"9663. N-Queen","level":1,"id":"9663. N-Queen"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"풀이","level":3,"id":"풀이"},{"heading":"실패: 시간초과","level":4,"id":"실패_시간초과"},{"heading":"성공","level":4,"id":"성공"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/9663.-n-queen.html","pathToRoot":"../..","attachments":[],"createdTime":1747967104607,"modifiedTime":1747967111447,"sourceSize":4217,"sourcePath":"Dev Blog/Coding Test/9663. N-Queen.md","exportPath":"dev-blog/coding-test/9663.-n-queen.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html":{"title":"2869. 달팽이는 올라가고 싶다","icon":"","description":"땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다.달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다.달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오.첫째 줄에 세 정수 A, B, V가 공백으로 구분되어서 주어진다. (1 ≤ B &lt; A ≤ V ≤ 1,000,000,000)첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력한다.\n기본 반복문 안 됨 → 시간 초과(시간 제한을 보면 0.25로 굉장히 짧은 걸 알 수 있다.)\n기본 수학으로 풀기 안 됨 → 그냥 하루에 이동하는 거리 분에 전체 거리(V/(A-B))로 풀 수 없음 포인트는 “정상에 올라간 후에는 미끄러지지 않는다”는 점\n하루의 마지막 그러니까 정상에 도달했는지를 체크하는 시기를 A만큼 올라간 직후로 잡으면 됨 기존의 수식(V/(A-B))은 올라갔다 B만큼 내려갔을 때 정상에 도달했는지를 체크함\n미리 A만큼 올려둬서(V -= A) (-B +A)를 한싸이클로 두면 됨.\n다르게 표현하면 첫째날 밤부터 시작하는 거임. import math A, B, V = map(int, input().split()) V -= A # 끝에 도달했는지 검증하는 시기가 올라간 직후니까. 이걸 해주지 않으면 내려간 후에 검증을 하게됨. 대신 이후에 하루 더해줘야함. q = math.ceil(V/(A-B)) # 내려갔다 올라갔다를 며칠씩 하는지. =&gt; A-B = 하루에 움직이는 거리 print(q + 1) 추가적으로 A 대신 B를 빼주는 경우가 있는데, 어떤 로직인지 이해를 다 하진 못함. ((V - B - 1) // (A - B) + 1)\n<a data-tooltip-position=\"top\" aria-label=\"https://chatgpt.com/share/68273f81-c5c8-800a-9c15-091d804653ca\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://chatgpt.com/share/68273f81-c5c8-800a-9c15-091d804653ca\" target=\"_self\">GPT 참고 링크</a>\nN일 째 밤에 V-B에 도달한거면, N일 째 낮에는 V에 도달한 거니까! ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"2869. 달팽이는 올라가고 싶다","level":1,"id":"2869. 달팽이는 올라가고 싶다"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"풀이","level":3,"id":"풀이"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html","pathToRoot":"../..","attachments":[],"createdTime":1747967245829,"modifiedTime":1747967246844,"sourceSize":2410,"sourcePath":"Dev Blog/Coding Test/2869. 달팽이는 올라가고 싶다.md","exportPath":"dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/1978.-소수-찾기.html":{"title":"1978. 소수 찾기","icon":"","description":"주어진 수 N개&nbsp;중에서&nbsp;소수가 몇 개인지 찾아서 출력하는 프로그램을 작성하시오.첫 줄에 수의 개수 N이 주어진다. N은 100이하이다. 다음으로 N개의 수가 주어지는데 수는 1,000 이하의 자연수이다.주어진 수들 중 소수의 개수를 출력한다.N = int(input())\nnums = list(map(int, input().split()))\ncnt = 0 for n in nums: if n == 1: cnt -= 1 for i in range(2, int(n**(0.5))+1): # math.sqrt 안하고 이거 해도 되네! if n % i == 0: break else: cnt += 1 print(cnt)\nmath.sqrt(n)대신 n**(0.5)를 사용해도 됨","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"1978. 소수 찾기","level":1,"id":"1978. 소수 찾기"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"풀이","level":3,"id":"풀이"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/1978.-소수-찾기.html","pathToRoot":"../..","attachments":[],"createdTime":1747967228377,"modifiedTime":1747967229246,"sourceSize":1040,"sourcePath":"Dev Blog/Coding Test/1978. 소수 찾기.md","exportPath":"dev-blog/coding-test/1978.-소수-찾기.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/9020.-골드바흐의-추측.html":{"title":"9020. 골드바흐의 추측","icon":"","description":"1보다 큰 자연수&nbsp;중에서 &nbsp;1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은&nbsp;모든 짝수 n에 대한 골드바흐 파티션은 존재한다.2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다. 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.\n4 ≤ n ≤ 10,000\nT = int(input()) targets = [] for _ in range(T): targets.append(int(input())) primes = [0]*(max(targets)+1) for i in range(2, len(primes)): if (i == 1): continue # 이미 채워졌으면 넘어감 -&gt; 자기 자신의 배수도 이미 다 지워졌기 때문에. for check in range(i+1, len(primes)): if check % i == 0: primes[check] = 1 for t in targets: for i in range(t//2, t): if primes[i] == 1: continue if primes[t-i] == 0: print(f\"{t-i} {i}\") break 에라토스테네스의 체로 소수를 구해 둔 다음에,\nt = t/2 + t/2니까 t//2에서부터 멀어져 가면서 각 수가 소수 인지를 판별하고 그렇다면 print 후 종료 → 더 자세히\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"9020. 골드바흐의 추측","level":1,"id":"9020. 골드바흐의 추측"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"제한","level":4,"id":"제한"},{"heading":"풀이","level":3,"id":"풀이"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/9020.-골드바흐의-추측.html","pathToRoot":"../..","attachments":[],"createdTime":1747967208221,"modifiedTime":1747967209780,"sourceSize":2506,"sourcePath":"Dev Blog/Coding Test/9020. 골드바흐의 추측.md","exportPath":"dev-blog/coding-test/9020.-골드바흐의-추측.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/1065.-한수.html":{"title":"1065. 한수","icon":"","description":"어떤 양의 정수 X의 각 자리가 등차수열을 이룬다면, 그 수를 한수라고 한다. 등차수열은 연속된 두 개의 수의 차이가 일정한 수열을 말한다. N이 주어졌을 때, 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력하는 프로그램을 작성하시오.&nbsp;첫째 줄에 1,000보다 작거나 같은 자연수 N이 주어진다.첫째 줄에 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력한다.N = int(input()) if N &lt; 100: print(N)\nelse: if N == 1000: N -= 1 sum = 99 numList = [0,0,0] for num in range(100, N+1): for i in range(3): numList[i] = num%10 num //= 10 if numList[0] - numList[1] == numList[1] - numList[2]: sum += 1 print(sum) 1자리수와 2자리수의 수는 모두 한수 → if N &lt; 100: print(N) 1000의 경우 한수가 아니므로 999와 한수의 개수가 같음 → if N == 1000: N -= 1 이 두 조건을 잘 활용하면 3자리 수에 대해서만 추가 로직을 수행하면 됨. 3자리 수에 대한 추가 로직 1자리수 2자리수의 개수 더해줌. → sum = 99\n100부터 각 자리 수를 리스트에 넣고 숫자들 사이에 등차성을 테스트(if numList[0] - numList[1] == numList[1] - numList[2]) 하면서 sum에 값을 누적(sum += 1 ) 추가적으로 뿌듯했던 점! 2년 전에 같은 문제를 풀었던 코드 보다 훨씬 깔끔해졌음!! # 2년전 코드\nimport sys def solution(): x = int(sys.stdin.readline().rstrip()) # x: 두자리 이하의 양의정수 if x &lt;= 99: return(x) # x가 abc(d)일 때 a(b-1)9(9)까지 탐색 n = 10 result = 99 i = 1 while n &lt; x//(10**i): d = ((n%10) - (n//10))*i a_1 = n%10 if a_1+d &gt;= 0 and a_1+d&lt;=9: result+=1 n += 1 # 자릿수 변화 if n == 100: n = 10 i += 1 # ab--일때 탐색 a_1 = n%10 d = ((n%10) - (n//10))*i if a_1+d &gt;= 0 and a_1+d&lt;=9: x_ = n for j in range(1,i+1): d = ((n%10) - (n//10))*j x_ = x_*(10*j) + (d+a_1) if x_ &lt;= x: result += 1 return result if __name__ == \"__main__\": print(solution())\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"1065. 한수","level":1,"id":"1065. 한수"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"풀이","level":3,"id":"풀이"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/1065.-한수.html","pathToRoot":"../..","attachments":[],"createdTime":1747967185930,"modifiedTime":1747967285308,"sourceSize":2803,"sourcePath":"Dev Blog/Coding Test/1065. 한수.md","exportPath":"dev-blog/coding-test/1065.-한수.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/2628.-종이-자르기.html":{"title":"2628. 종이 자르기","icon":"","description":"아래 &lt;그림 1&gt;과 같이 직사각형 모양의 종이가 있다. 이 종이는 가로방향과 세로 방향으로 1㎝마다 점선이 그어져 있다. 가로 점선은 위에서 아래로 1번부터 차례로 번호가 붙어 있고, 세로 점선은 왼쪽에서 오른쪽으로 번호가 붙어 있다.<img alt=\"\" src=\"https://upload.acmicpc.net/1e689dae-2d24-463b-8725-fb58ae8cd2ba/-/preview/\" referrerpolicy=\"no-referrer\" style=\"width: 300px; max-width: 100%;\" target=\"_self\" class=\"is-unresolved\">&lt;그림 1&gt;점선을 따라 이 종이를 칼로 자르려고 한다. 가로 점선을 따라 자르는 경우는 종이의 왼쪽 끝에서 오른쪽 끝까지, 세로 점선인 경우는 위쪽 끝에서 아래쪽 끝까지 한 번에 자른다. 예를 들어, &lt;그림 1&gt;의 가로 길이 10㎝이고 세로 길이 8㎝인 종이를 3번 가로 점선, 4번 세로 점선, 그리고 2번 가로 점선을 따라 자르면 &lt;그림 2&gt;와 같이 여러 개의 종이 조각으로 나뉘게 된다. 이때 가장 큰 종이 조각의 넓이는 30㎠이다.<br><img alt=\"\" src=\"https://upload.acmicpc.net/cf033b95-91ef-4e71-8f2c-49c653e27622/-/preview/\" referrerpolicy=\"no-referrer\" style=\"width: 300px; max-width: 100%;\" target=\"_self\" class=\"is-unresolved\">&lt;그림 2&gt;입력으로 종이의 가로 세로 길이, 그리고 잘라야할 점선들이 주어질 때, 가장 큰 종이 조각의 넓이가 몇 ㎠인지를 구하는 프로그램을 작성하시오.첫줄에는 종이의 가로와 세로의 길이가 차례로 자연수로 주어진다. 가로와 세로의 길이는 최대 100㎝이다. 둘째 줄에는 칼로 잘라야하는 점선의 개수가 주어진다. 셋째 줄부터 마지막 줄까지 한 줄에 점선이 하나씩 아래와 같은 방법으로 입력된다. 가로로 자르는 점선은 0과 점선 번호가 차례로 주어지고, 세로로 자르는 점선은 1과 점선 번호가 주어진다. 입력되는 두 숫자 사이에는 빈 칸이 하나씩 있다.첫째 줄에 가장 큰 종이 조각의 넓이를 출력한다. 단, 넓이의 단위는 출력하지 않는다.X, Y = map(int, input().split(\" \")) T = int(input()) xs = [0, X] ys = [0, Y] for _ in range(T): dir, loc = map(int, input().split(\" \")) if dir == 0: ys.append(loc) # 가로 else: xs.append(loc) # 세로 xs.sort() # 자체 정렬(반환x) / list 메서드 ys.sort() xMax = 0 yMax = 0 for i in range(len(xs)-1): xline = xs[i+1] - xs[i] if xline &gt; xMax: xMax = xline for i in range(len(ys) - 1): yline = ys[i + 1] - ys[i] if yline &gt; yMax: yMax = yline print(xMax * yMax) 각 열이 나뉘는 위치를 xs에 각 행이 나뉘는 위치를 ys에 저장 각각 0부터 X까지, 0부터 Y까지라 초기에 2수를 저장해줘야함. input을 받아서 해당하는 list에 넣어주고, sort를 돌림 각 리스트를 순회하면서 가장 긴 변들을 선정하고, 해당 값을 곱하면 그것이 답! ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"2628. 종이 자르기","level":1,"id":"2628. 종이 자르기"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"풀이","level":3,"id":"풀이"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/2628.-종이-자르기.html","pathToRoot":"../..","attachments":[],"createdTime":1747967166129,"modifiedTime":1747967166909,"sourceSize":3144,"sourcePath":"Dev Blog/Coding Test/2628. 종이 자르기.md","exportPath":"dev-blog/coding-test/2628.-종이-자르기.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/1914.-하노이-탑.html":{"title":"1914. 하노이 탑","icon":"","description":"세 개의 장대가 있고 첫 번째 장대에는 반경이 서로 다른 n개의 원판이 쌓여 있다. 각 원판은 반경이 큰 순서대로&nbsp;쌓여있다. 이제 수도승들이 다음 규칙에 따라 첫 번째 장대에서 세 번째 장대로 옮기려 한다.\n한 번에 한 개의 원판만을 다른 탑으로 옮길 수 있다.\n쌓아 놓은 원판은 항상 위의 것이 아래의 것보다 작아야 한다.\n이 작업을 수행하는데 필요한 이동 순서를 출력하는 프로그램을 작성하라. 단, 이동 횟수는 최소가 되어야 한다.아래 그림은 원판이 5개인 경우의 예시이다.<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11729/hanoi.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">첫째 줄에 첫 번째 장대에 쌓인 원판의 개수 N (1 ≤ N ≤ 100)이 주어진다.첫째 줄에 옮긴 횟수 K를 출력한다.N이 20 이하인 입력에 대해서는 두 번째 줄부터 수행 과정을 출력한다. 두 번째 줄부터 K개의 줄에 걸쳐 두 정수 A B를 빈칸을 사이에 두고 출력하는데, 이는 A번째 탑의 가장 위에 있는 원판을 B번째 탑의 가장 위로 옮긴다는 뜻이다. N이 20보다 큰 경우에는 과정은 출력할 필요가 없다.def hanoi(num, start, sub, dst): if num ==1: print(start, dst) return hanoi(num-1, start, dst, sub) # (N-1)번째까지를 N번째 원판 위에서 치우기 -&gt; 보조 막대로 옮기기 print(start, dst) # N번째 원판을 목표 막대로 옮기기 hanoi(num-1, sub, start, dst) # (N-1)번째까지의 원판을 N번째 원판 위로 올리기 -&gt; 보조막대에서 dst로. return N = int(input()) print(2**N -1) # 총 실행 횟수\nif (N &lt;= 20): hanoi(N,1,2,3) hanoi(num, start, sub, dst): num만큼의 원판을 start 기둥에서 dst 기둥으로 이동시키는 역할 매개변수 num: 옮길 원판의 개수\nstart: 시작기둥의 위치\nsub: 보조기둥의 위치\ndst: 목적지 기둥의 위치 내부 동작 옮겨야할 원판이 하나일 때 → 자신 위에 원판이 하나도 없다는 뜻이기 때문에, 바로 옮기고(print) return\n옮겨야할 원판이 하나 이상일 때 제일 밑에 n번째 원판을 제외하고, n-1번째 원판까지 보조 막대(sub)에 옮김\nn번째 원판을 dst에 옮김(print)\n보조 막대(sub)에 있는 n-1개의 원판을 목적지 막대(dst)로 (= n번째 원판 위로) 옮김 여기서 모든 옮기는 행위는 hanoi함수를 사용하여 진행할 수 있으므로 재귀적으로 호출 n번째 원판을 dst에 옮김(print) → 이부분은 재귀호출을 해도 되나, 그냥 print만 해도 되어서 후자로 구현 예시: 원판 3개를 기둥1에서 기둥3으로 옮겨야한다고 하면, 원판 3개 중 맨 아래 1개를 뺀 2개를 먼저 보조기둥으로 옮기고, 맨 밑에 원판을 목적지 기둥으로 옮기고, 보조기둥에 있던 2개의 원판을 원래 목적지 기둥으로 옮기는 행위를 하도록 코딩되어 있어. 1개 이상의 기둥을 옮길 때는 하노이 함수를 다시 재귀적으로 호출해서 비슷한 행위를 반복해. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"1914. 하노이 탑","level":1,"id":"1914. 하노이 탑"},{"heading":"문제","level":3,"id":"문제"},{"heading":"입력","level":4,"id":"입력"},{"heading":"출력","level":4,"id":"출력"},{"heading":"풀이","level":3,"id":"풀이"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/1914.-하노이-탑.html","pathToRoot":"../..","attachments":[],"createdTime":1747967150421,"modifiedTime":1747967151229,"sourceSize":3665,"sourcePath":"Dev Blog/Coding Test/1914. 하노이 탑.md","exportPath":"dev-blog/coding-test/1914.-하노이-탑.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/10971.-외판원-순회2.html":{"title":"10971. 외판원 순회2","icon":"","description":"def tsp(start, now, move, cost): # 부분 1 if (move == 1): if (lst[now][start] != 0): costs.append(cost+lst[now][start]) return # 부분 2 visited[now] = 1 for next in range(N): if visited[next] == 0 and lst[now][next] != 0: tsp(start,next, move-1, cost+ lst[now][next]) visited[now] = 0 return N = int(input()) lst = [list(map(int, input().split(\" \"))) for _ in range(N)] visited = [0] * N costs = [] for i in range(N): tsp(i, i, N, 0) print(min(costs)) tsp(start, now, move, cost)의 역할 : 외판원이 한 노드를 방문하고 다음으로 갈 노드를 찾고, 해당 노드에 대해서 함수를 재귀적으로 호출하여 다시 방문함. 목적지에 도달하면 거쳐온 경로의 비용을 저장함. 매개 변수 start: 경로의 시작노드 -&gt; 맨 마지막에는 시작노드로 돌아가야하기 때문에 정보 전달을 위해 now: 현재 노드 -&gt; 현재노드 방문 표시와, 다음에 갈 수 있는 노드를 탐색하기 위해\nmove: 앞으로 거쳐야 하는 노드의 남은 개수 -&gt; 1이 되면 모든 노드를 방문했으므로 시작노드(start)로 돌아가야함\ncost: 지금까지 경로에서 누적되어온 비용 -&gt; 순회에 성공하면 전체 비용을 costs 리스트에 저장하고 마지막에 모든 경우 중 최솟값을 구함 내부 동작 부분 1: 남은 노드의 개수가 1인 경우 현재 노드(now)에서 최초 노드(start)로 갈 수 있는다면, 지금까지의 cost와 최초로 돌아가는 경로의 비용을 합쳐서 costs 리스트에 저장\n갈 수 없다면 pass 부분 2: now에 대한 방문 처리를 하고 → visited[now] = 1\n0부터 N까지 순회하면서 갈 수 있는 다음 노드를 탐색\n→ if visited[next] == 0 and lst[now][next] != 0: 갈 수 있는 노드를 찾으면, tsp()함수를 재귀적으로 호출해 해당 노드를 방문\n→ tsp(start,next, move-1, cost+ lst[now][next])\n모두 방문을 하고 돌아오면, 현재 노드(now) 방문을 회수 다 돌고 costs에 저장된 값 중 최솟값을 출력\ndef tsp(start, now, move): # 부분 1 if (move == 1): if (lst[now][start] != 0): return lst[now][start] else: return int(1e9) # 부분 2 visited[now] = 1 cost = int(1e9) for next in range(N): if visited[next] == 0 and lst[now][next] != 0: cost = min(tsp(start,next, move-1)+lst[now][next], cost) visited[now] = 0 return cost N = int(input()) lst = [list(map(int, input().split(\" \"))) for _ in range(N)] visited = [0] * N minCost = int(1e9) for i in range(N): minCost = min(minCost, tsp(i, i, N)) print(minCost) cost를 매개변수로 넘겨주는 게 아니라 return으로 받는 방식\n수정 부분 1에서 마지막에 최초노드로 돌아갈 수 있으면 now → start의 비용을 return\n갈 수 없으면 엄청 큰 값(‘int(1e9)) return 부분 2에서 방문 후 돌아올 때 가져오는 return 값 중에 가장 작은 값을 cost변수에 저장하고 해당 값을 return 함 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"10971. 외판원 순회2","level":1,"id":"10971. 외판원 순회2"},{"heading":"풀이","level":3,"id":"풀이"},{"heading":"Tail Recursion","level":4,"id":"Tail_Recursion"},{"heading":"일반 recursion","level":4,"id":"일반_recursion"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/10971.-외판원-순회2.html","pathToRoot":"../..","attachments":[],"createdTime":1747967063421,"modifiedTime":1747967065117,"sourceSize":3535,"sourcePath":"Dev Blog/Coding Test/10971. 외판원 순회2.md","exportPath":"dev-blog/coding-test/10971.-외판원-순회2.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/2468.-안전지대.html":{"title":"2468. 안전지대","icon":"","description":"def safe(h): # h: 가준 물 높이 / que = deque() # 부분 1 que = deque() visited = [[0 for _ in range(N)] for _ in range(N)] # 부분 2 while True: nextSafe = findNextSafe(h,visited) if nextSafe: visited[nextSafe[0]][nextSafe[1]] = 1 que.append(nextSafe) else: return # 부분 3 while que: node = que.popleft() x = node[0] y = node[1] for i in a: nx = x+i[0] ny = y+i[1] if 0&lt;=nx&lt;N and 0&lt;=ny&lt;N and visited[nx][ny] == 0 and lst[nx][ny] &gt; h: visited[nx][ny] = 1 que.append((nx,ny)) def findNextSafe(h, visited): for i in range(0, N): for j in range(0, N): if visited[i][j] == 0 and lst[i][j] &gt; h: waterCnt[h] += 1 return (i, j) return None input = __import__('sys').stdin.readline N = int(input()) a = [[-1, 0], [1, 0], [0, -1], [0, 1]] lst = [list(map(int, input().split(\" \"))) for _ in range(N)] waterCnt = [-1]*101 # 물 높이 waterCnt[0] = 1 waterCnt[100] = 0 for i in range(N): for j in range(N): h = lst[i][j] if waterCnt[h] == -1: waterCnt[h] += 1 safe(h) safe(100) print(max(waterCnt)) 용어 안전한 땅: 특정 물높이 h에 대해 h를 초과하는 지역\n안전지대: 연결되어있는 안전한 땅을 안전지대라고 부름 (연결된 것중 최대 크기) 전역변수 waterCnt 배열: 각 물높이에 대해 안전지대가 몇 개인지 개수를 저장\na 배열: 연결된 다음 안전지대를 찾을 때, 좌표 이동을 위한 배열\nlst 배열: 땅 높이에 대한 정보가 저장 findNextSafe(h, visited)의 역할: 안전한 땅을 탐색하다가 길이 끊겼을 경우(혹은 최초에), 다음으로 아직 방문하지 않은 안전한 땅을 찾는 역할 배열 전체 (땅 전체)를 순회하면서, 아직 방문하지 않았고, 안전한 땅을 찾으면, 해당 땅 위치를 return 또한 이 경우 새로운 안전한 땅 유닛 (=안전지대)의 시작이기 때문에, 해당 높이의 안전지대 count를 올려줌 (waterCnt[h])\n찾는 값이 없을 경우 None을 return safe(h)의 역할: 특정 물높이 h에 대해 h를 초과하는 지역(=안전한 땅)을 방문하고 그 지역과 연결된 다른 안전한 땅을 차례로 방문하는 함수 부분 1: visited 배열: 해당 물높이 h에 대해서 탐색할 때, 특정 지역에 방문 했는지를 체크하는 용도의 배열\nque: 선입 선출의 특징을 가진 리스트로, 갈 수 있는 땅을 발견했을 때, 해당 que에 집어 넣음. 또한 순서대로 빼면서, 빼낸 땅에 대해 인접한 안전한 땅이 또 있는지 확인하기 위해 선언 부분 2 findNextSafe함수를 통해 다음 안전지대 시작점을 찾을 수 없을 때까지 계속 안전지대 탐색을 반복 부분 3 방문한 땅을 하나 빼냄 → node = que.popleft()\n해당 땅에 인접한 땅들을 순회((x-1, y), (x+1, y), (x, y-1), (x, y+1))\n그 땅이 배열의 안에 있고(0&lt;=nx&lt;N and 0&lt;=ny&lt;N), 안전한 땅이며(lst[nx][ny] &gt; h), 아직 방문하지 않은 곳(visited[nx][ny] == 0)인지를 체크\n모두 True라면 해당 땅을 방문하고, 다음 탐색을 위해 que에 삽입\n이것을 que가 다 빌 때까지 반복 물 높이(h) 관련 h = 0일 때, 안전지대는 1개 → 모든 땅이 물에 잠기지 않았음\nh = 100 일때, 안전지대는 0개 → 모든 땅이 물에 잠겼음\n이 외에 물높이에 따라 안전지대의 개수가 변하기 위해서는, 물높이가 특정 땅의 높이와 일치되어야한다.\n즉, 땅 높이가 1 5 8일 때, 물높이 1에서 부터 4까지는 동일한 땅이 물에 잠기고 동일한 땅이 물위에 있지만, 5부터는 물에 잠긴 모습이 변하게 됨.\n따라서, 탐색에 적용할 h의 값은 모든 땅의 높이와 최소 높이 0, 최고 높이 100이다. 출력: waterCnt의 최대값을 출력 시간 초과 원인: 다음 안전지대 시작 위치를 찾는걸 어떻게 해야하지 헷갈렸는데, 어김없이 거기서 문제가 생김 findNextSafe 함수에서 다음 안전지대 시작점을 찾을 때, 매번 처음부터 끝까지 탐색을 하니까 시간이 오래걸림 함수 findNextSafe와 safe로 나누지 말고 2중 포문 돌리면서 다음 시작위치를 탐색하다가 시작위치를 찾으면 que에 넣어서 안전지대 하나 탐험 시작. 그리고 탐험 끝나면, 아까 찾은 안전지대 시작위치 뒤부터 탐색을 시작해서 다음 안전지대를 찾는 방식으로 수정 from collections import deque def safe(h): # h: 가준 물 높이 / que = deque() visited = [[0 for _ in range(N)] for _ in range(N)] for i in range(0, N): for j in range(0, N): if visited[i][j] == 0 and lst[i][j] &gt; h: waterCnt[h] += 1 visited[i][j] = 1 que.append((i,j)) while que: node = que.popleft() x = node[0] y = node[1] for a in A: nx = x+a[0] ny = y+a[1] if 0&lt;=nx&lt;N and 0&lt;=ny&lt;N and visited[nx][ny] == 0 and lst[nx][ny] &gt; h: visited[nx][ny] = 1 que.append((nx,ny)) input = __import__('sys').stdin.readline N = int(input()) A = [[-1, 0], [1, 0], [0, -1], [0, 1]] lst = [list(map(int, input().split(\" \"))) for _ in range(N)] waterCnt = [-1]*101 waterCnt[0] = 1 waterCnt[100] = 0 for i in range(N): for j in range(N): h = lst[i][j] if waterCnt[h] == -1: waterCnt[h] += 1 safe(h) safe(100) print(max(waterCnt))\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"2468. 안전지대","level":1,"id":"2468. 안전지대"},{"heading":"풀이","level":3,"id":"풀이"},{"heading":"실패 → 시간 초과","level":4,"id":"실패_→_시간_초과"},{"heading":"성공","level":4,"id":"성공"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/2468.-안전지대.html","pathToRoot":"../..","attachments":[],"createdTime":1747966984125,"modifiedTime":1747966985548,"sourceSize":6416,"sourcePath":"Dev Blog/Coding Test/2468. 안전지대.md","exportPath":"dev-blog/coding-test/2468.-안전지대.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/coding-test/coding-test.html":{"title":"Coding Test","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Coding Test","level":1,"id":"Coding Test"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/coding-test/coding-test.html","pathToRoot":"../..","attachments":[],"createdTime":1747966827839,"modifiedTime":1747966828259,"sourceSize":74,"sourcePath":"Dev Blog/Coding Test/Coding Test.md","exportPath":"dev-blog/coding-test/coding-test.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/data-structure/data-structure.html":{"title":"Data Structure","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Data Structure","level":1,"id":"Data Structure"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/data-structure/data-structure.html","pathToRoot":"../..","attachments":[],"createdTime":1747966841178,"modifiedTime":1747966841878,"sourceSize":74,"sourcePath":"Dev Blog/Data Structure/Data Structure.md","exportPath":"dev-blog/data-structure/data-structure.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/jungle/week-1.html":{"title":"Week 1","icon":"","description":"<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/2869. 달팽이는 올라가고 싶다.md\" href=\"dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html\" target=\"_self\" rel=\"noopener nofollow\">2869. 달팽이는 올라가고 싶다</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/1978. 소수 찾기.md\" href=\"dev-blog/coding-test/1978.-소수-찾기.html\" target=\"_self\" rel=\"noopener nofollow\">1978. 소수 찾기</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/9020. 골드바흐의 추측.md\" href=\"dev-blog/coding-test/9020.-골드바흐의-추측.html\" target=\"_self\" rel=\"noopener nofollow\">9020. 골드바흐의 추측</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/1065. 한수.md\" href=\"dev-blog/coding-test/1065.-한수.html\" target=\"_self\" rel=\"noopener nofollow\">1065. 한수</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/2628. 종이 자르기.md\" href=\"dev-blog/coding-test/2628.-종이-자르기.html\" target=\"_self\" rel=\"noopener nofollow\">2628. 종이 자르기</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/1914. 하노이 탑.md\" href=\"dev-blog/coding-test/1914.-하노이-탑.html\" target=\"_self\" rel=\"noopener nofollow\">1914. 하노이 탑</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/9663. N-Queen.md\" href=\"dev-blog/coding-test/9663.-n-queen.html\" target=\"_self\" rel=\"noopener nofollow\">9663. N-Queen</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/1074. Z.md\" href=\"dev-blog/coding-test/1074.-z.html\" target=\"_self\" rel=\"noopener nofollow\">1074. Z</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/10819. 차이를 최대로.md\" href=\"dev-blog/coding-test/10819.-차이를-최대로.html\" target=\"_self\" rel=\"noopener nofollow\">10819. 차이를 최대로</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/10971. 외판원 순회2.md\" href=\"dev-blog/coding-test/10971.-외판원-순회2.html\" target=\"_self\" rel=\"noopener nofollow\">10971. 외판원 순회2</a><br>\n<a class=\"internal-link\" data-href=\"Dev Blog/Coding Test/2468. 안전지대.md\" href=\"dev-blog/coding-test/2468.-안전지대.html\" target=\"_self\" rel=\"noopener nofollow\">2468. 안전지대</a><br><a class=\"internal-link\" data-href=\"Dev Blog/CSAPP/컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행.md\" href=\"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html\" target=\"_self\" rel=\"noopener nofollow\">컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Week 1","level":1,"id":"Week 1"},{"heading":"Coding Testest","level":3,"id":"[Coding_Test](Dev%20Blog/Coding%20Test/Coding%20Test.md)est"},{"heading":"CSAPP","level":3,"id":"CSAPP"}],"links":["dev-blog/coding-test/coding-test.html","dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html","dev-blog/coding-test/1978.-소수-찾기.html","dev-blog/coding-test/9020.-골드바흐의-추측.html","dev-blog/coding-test/1065.-한수.html","dev-blog/coding-test/2628.-종이-자르기.html","dev-blog/coding-test/1914.-하노이-탑.html","dev-blog/coding-test/9663.-n-queen.html","dev-blog/coding-test/1074.-z.html","dev-blog/coding-test/10819.-차이를-최대로.html","dev-blog/coding-test/10971.-외판원-순회2.html","dev-blog/coding-test/2468.-안전지대.html","dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html"],"author":"","coverImageURL":"","fullURL":"dev-blog/jungle/week-1.html","pathToRoot":"../..","attachments":[],"createdTime":1747967262300,"modifiedTime":1747967517320,"sourceSize":1104,"sourcePath":"Dev Blog/Jungle/Week 1.md","exportPath":"dev-blog/jungle/week-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/jungle/jungle.html":{"title":"Jungle","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Jungle","level":1,"id":"Jungle"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/jungle/jungle.html","pathToRoot":"../..","attachments":[],"createdTime":1747967262300,"modifiedTime":1747967262639,"sourceSize":74,"sourcePath":"Dev Blog/Jungle/Jungle.md","exportPath":"dev-blog/jungle/jungle.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"index.html":{"title":"index","icon":"","description":"Obsidian publishing 용 블로그 입니다.\n컴퓨터 관련 다양한 지식들을 업로드해 둘 예정입니다.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"index","level":1,"id":"index"},{"heading":"개요","level":3,"id":"개요"},{"heading":"Nav","level":3,"id":"Nav"}],"links":["dev-blog/jungle/jungle.html","dev-blog/data-structure/data-structure.html","dev-blog/coding-test/coding-test.html","dev-blog/csapp/csapp.html"],"author":"","coverImageURL":"","fullURL":"index.html","pathToRoot":".","attachments":[],"createdTime":1747967820644,"modifiedTime":1747967918919,"sourceSize":602,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev-blog/jungle/week-2.html":{"title":"Week 2","icon":"<svg class=\"svg-icon lucide-file\" stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\"></path><path d=\"M14 2v4a2 2 0 0 0 2 2h4\"></path></svg>","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Week 2","level":1,"id":"Week 2"}],"links":[],"author":"","coverImageURL":"","fullURL":"dev-blog/jungle/week-2.html","pathToRoot":"../..","attachments":[],"createdTime":1747972311608,"modifiedTime":1747972342618,"sourceSize":25,"sourcePath":"Dev Blog/Jungle/Week 2.md","exportPath":"dev-blog/jungle/week-2.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"}},"fileInfo":{"dev-blog/dev-blog.html":{"createdTime":1747966599472,"modifiedTime":1747972317228,"sourceSize":465,"sourcePath":"Dev Blog/Dev Blog.md","exportPath":"dev-blog/dev-blog.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html":{"createdTime":1747966660132,"modifiedTime":1747967655090,"sourceSize":27451,"sourcePath":"Dev Blog/CSAPP/컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행.md","exportPath":"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/csapp/csapp.html":{"createdTime":1747966729672,"modifiedTime":1747966730400,"sourceSize":74,"sourcePath":"Dev Blog/CSAPP/CSAPP.md","exportPath":"dev-blog/csapp/csapp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/10819.-차이를-최대로.html":{"createdTime":1747967132371,"modifiedTime":1747967133468,"sourceSize":2070,"sourcePath":"Dev Blog/Coding Test/10819. 차이를 최대로.md","exportPath":"dev-blog/coding-test/10819.-차이를-최대로.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/1074.-z.html":{"createdTime":1747967448873,"modifiedTime":1747967450516,"sourceSize":4728,"sourcePath":"Dev Blog/Coding Test/1074. Z.md","exportPath":"dev-blog/coding-test/1074.-z.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/9663.-n-queen.html":{"createdTime":1747967104607,"modifiedTime":1747967111447,"sourceSize":4217,"sourcePath":"Dev Blog/Coding Test/9663. N-Queen.md","exportPath":"dev-blog/coding-test/9663.-n-queen.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html":{"createdTime":1747967245829,"modifiedTime":1747967246844,"sourceSize":2410,"sourcePath":"Dev Blog/Coding Test/2869. 달팽이는 올라가고 싶다.md","exportPath":"dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/1978.-소수-찾기.html":{"createdTime":1747967228377,"modifiedTime":1747967229246,"sourceSize":1040,"sourcePath":"Dev Blog/Coding Test/1978. 소수 찾기.md","exportPath":"dev-blog/coding-test/1978.-소수-찾기.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/9020.-골드바흐의-추측.html":{"createdTime":1747967208221,"modifiedTime":1747967209780,"sourceSize":2506,"sourcePath":"Dev Blog/Coding Test/9020. 골드바흐의 추측.md","exportPath":"dev-blog/coding-test/9020.-골드바흐의-추측.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/1065.-한수.html":{"createdTime":1747967185930,"modifiedTime":1747967285308,"sourceSize":2803,"sourcePath":"Dev Blog/Coding Test/1065. 한수.md","exportPath":"dev-blog/coding-test/1065.-한수.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/2628.-종이-자르기.html":{"createdTime":1747967166129,"modifiedTime":1747967166909,"sourceSize":3144,"sourcePath":"Dev Blog/Coding Test/2628. 종이 자르기.md","exportPath":"dev-blog/coding-test/2628.-종이-자르기.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/1914.-하노이-탑.html":{"createdTime":1747967150421,"modifiedTime":1747967151229,"sourceSize":3665,"sourcePath":"Dev Blog/Coding Test/1914. 하노이 탑.md","exportPath":"dev-blog/coding-test/1914.-하노이-탑.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/10971.-외판원-순회2.html":{"createdTime":1747967063421,"modifiedTime":1747967065117,"sourceSize":3535,"sourcePath":"Dev Blog/Coding Test/10971. 외판원 순회2.md","exportPath":"dev-blog/coding-test/10971.-외판원-순회2.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/2468.-안전지대.html":{"createdTime":1747966984125,"modifiedTime":1747966985548,"sourceSize":6416,"sourcePath":"Dev Blog/Coding Test/2468. 안전지대.md","exportPath":"dev-blog/coding-test/2468.-안전지대.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/coding-test/coding-test.html":{"createdTime":1747966827839,"modifiedTime":1747966828259,"sourceSize":74,"sourcePath":"Dev Blog/Coding Test/Coding Test.md","exportPath":"dev-blog/coding-test/coding-test.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/data-structure/data-structure.html":{"createdTime":1747966841178,"modifiedTime":1747966841878,"sourceSize":74,"sourcePath":"Dev Blog/Data Structure/Data Structure.md","exportPath":"dev-blog/data-structure/data-structure.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/jungle/week-1.html":{"createdTime":1747967262300,"modifiedTime":1747967517320,"sourceSize":1104,"sourcePath":"Dev Blog/Jungle/Week 1.md","exportPath":"dev-blog/jungle/week-1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev-blog/jungle/jungle.html":{"createdTime":1747967262300,"modifiedTime":1747967262639,"sourceSize":74,"sourcePath":"Dev Blog/Jungle/Jungle.md","exportPath":"dev-blog/jungle/jungle.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"index.html":{"createdTime":1747967820644,"modifiedTime":1747967918919,"sourceSize":602,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1747968368976,"modifiedTime":1747968368976,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1747968368975,"modifiedTime":1747968368975,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1747968368976,"modifiedTime":1747968368976,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1747968368977,"modifiedTime":1747968368977,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1747968368977,"modifiedTime":1747968368977,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1747968368978,"modifiedTime":1747968368978,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1747968368978,"modifiedTime":1747968368978,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1747968368978,"modifiedTime":1747968368978,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1747968368980,"modifiedTime":1747968368980,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1747968368981,"modifiedTime":1747968368981,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1747968368979,"modifiedTime":1747968368979,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1747968368982,"modifiedTime":1747968368982,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1747968368973,"modifiedTime":1747968368973,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/6155340132a851f6089e.svg":{"createdTime":1747968368974,"modifiedTime":1747968368974,"sourceSize":315,"sourcePath":"","exportPath":"site-lib/media/6155340132a851f6089e.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/2308ab1944a6bfa5c5b8.svg":{"createdTime":1747968368975,"modifiedTime":1747968368975,"sourceSize":278,"sourcePath":"","exportPath":"site-lib/media/2308ab1944a6bfa5c5b8.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1747972409765,"modifiedTime":1747972409765,"sourceSize":11119,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1747966529668,"modifiedTime":1747966529668,"sourceSize":72357,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/minisearch.js":{"createdTime":1747966529668,"modifiedTime":1747966529668,"sourceSize":29440,"sourcePath":"","exportPath":"site-lib/scripts/minisearch.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1747968368941,"modifiedTime":1747968368941,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/snippets.css":{"createdTime":1747968369105,"modifiedTime":1747968369105,"sourceSize":712,"sourcePath":"","exportPath":"site-lib/styles/snippets.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/obsidian.css":{"createdTime":1747968369078,"modifiedTime":1747968369078,"sourceSize":209791,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/other-plugins.css":{"createdTime":1747968363828,"modifiedTime":1747968363828,"sourceSize":28119,"sourcePath":"","exportPath":"site-lib/styles/other-plugins.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/theme.css":{"createdTime":1747966529875,"modifiedTime":1747966529875,"sourceSize":216213,"sourcePath":"","exportPath":"site-lib/styles/theme.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1747968368956,"modifiedTime":1747968368956,"sourceSize":716,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/supported-plugins.css":{"createdTime":1747968369103,"modifiedTime":1747968369103,"sourceSize":41881,"sourcePath":"","exportPath":"site-lib/styles/supported-plugins.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1747966529694,"modifiedTime":1747966529694,"sourceSize":17291,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"⁵-file/image/pasted-image-20250517110728.png":{"createdTime":1747447648393,"modifiedTime":1747447648394,"sourceSize":71361,"sourcePath":"⁵ File/image/Pasted image 20250517110728.png","exportPath":"⁵-file/image/pasted-image-20250517110728.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"⁵-file/image/pasted-image-20250517163436.png":{"createdTime":1747467276450,"modifiedTime":1747467276451,"sourceSize":890293,"sourcePath":"⁵ File/image/Pasted image 20250517163436.png","exportPath":"⁵-file/image/pasted-image-20250517163436.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"⁵-file/image/pasted-image-20250517164101.png":{"createdTime":1747467661153,"modifiedTime":1747467661153,"sourceSize":138069,"sourcePath":"⁵ File/image/Pasted image 20250517164101.png","exportPath":"⁵-file/image/pasted-image-20250517164101.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"⁵-file/image/pasted-image-20250517170728.png":{"createdTime":1747469248753,"modifiedTime":1747469248754,"sourceSize":36800,"sourcePath":"⁵ File/image/Pasted image 20250517170728.png","exportPath":"⁵-file/image/pasted-image-20250517170728.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"⁵-file/image/pasted-image-20250517172142.png":{"createdTime":1747470102054,"modifiedTime":1747470102056,"sourceSize":36196,"sourcePath":"⁵ File/image/Pasted image 20250517172142.png","exportPath":"⁵-file/image/pasted-image-20250517172142.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"⁵-file/image/pasted-image-20250517190742.png":{"createdTime":1747476462488,"modifiedTime":1747476462488,"sourceSize":17841,"sourcePath":"⁵ File/image/Pasted image 20250517190742.png","exportPath":"⁵-file/image/pasted-image-20250517190742.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"⁵-file/image/pasted-image-20250517193510.png":{"createdTime":1747478110685,"modifiedTime":1747478110686,"sourceSize":274922,"sourcePath":"⁵ File/image/Pasted image 20250517193510.png","exportPath":"⁵-file/image/pasted-image-20250517193510.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"⁵-file/image/pasted-image-20250517210011.png":{"createdTime":1747483211650,"modifiedTime":1747483211652,"sourceSize":14846,"sourcePath":"⁵ File/image/Pasted image 20250517210011.png","exportPath":"⁵-file/image/pasted-image-20250517210011.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"dev-blog/jungle/week-2.html":{"createdTime":1747972311608,"modifiedTime":1747972342618,"sourceSize":25,"sourcePath":"Dev Blog/Jungle/Week 2.md","exportPath":"dev-blog/jungle/week-2.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"site-lib/rss.xml":{"createdTime":1747972409776,"modifiedTime":1747972409776,"sourceSize":681,"sourcePath":"","exportPath":"site-lib/rss.xml","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null}},"sourceToTarget":{"Dev Blog/Dev Blog.md":"dev-blog/dev-blog.html","Dev Blog/CSAPP/컴퓨터시스템 CH1. 컴퓨터 시스템으로의 여행.md":"dev-blog/csapp/컴퓨터시스템-ch1.-컴퓨터-시스템으로의-여행.html","Dev Blog/CSAPP/CSAPP.md":"dev-blog/csapp/csapp.html","Dev Blog/Coding Test/10819. 차이를 최대로.md":"dev-blog/coding-test/10819.-차이를-최대로.html","Dev Blog/Coding Test/1074. Z.md":"dev-blog/coding-test/1074.-z.html","Dev Blog/Coding Test/9663. N-Queen.md":"dev-blog/coding-test/9663.-n-queen.html","Dev Blog/Coding Test/2869. 달팽이는 올라가고 싶다.md":"dev-blog/coding-test/2869.-달팽이는-올라가고-싶다.html","Dev Blog/Coding Test/1978. 소수 찾기.md":"dev-blog/coding-test/1978.-소수-찾기.html","Dev Blog/Coding Test/9020. 골드바흐의 추측.md":"dev-blog/coding-test/9020.-골드바흐의-추측.html","Dev Blog/Coding Test/1065. 한수.md":"dev-blog/coding-test/1065.-한수.html","Dev Blog/Coding Test/2628. 종이 자르기.md":"dev-blog/coding-test/2628.-종이-자르기.html","Dev Blog/Coding Test/1914. 하노이 탑.md":"dev-blog/coding-test/1914.-하노이-탑.html","Dev Blog/Coding Test/10971. 외판원 순회2.md":"dev-blog/coding-test/10971.-외판원-순회2.html","Dev Blog/Coding Test/2468. 안전지대.md":"dev-blog/coding-test/2468.-안전지대.html","Dev Blog/Coding Test/Coding Test.md":"dev-blog/coding-test/coding-test.html","Dev Blog/Data Structure/Data Structure.md":"dev-blog/data-structure/data-structure.html","Dev Blog/Jungle/Week 1.md":"dev-blog/jungle/week-1.html","Dev Blog/Jungle/Jungle.md":"dev-blog/jungle/jungle.html","index.md":"index.html","":"site-lib/rss.xml","⁵ File/image/Pasted image 20250517110728.png":"⁵-file/image/pasted-image-20250517110728.png","⁵ File/image/Pasted image 20250517163436.png":"⁵-file/image/pasted-image-20250517163436.png","⁵ File/image/Pasted image 20250517164101.png":"⁵-file/image/pasted-image-20250517164101.png","⁵ File/image/Pasted image 20250517170728.png":"⁵-file/image/pasted-image-20250517170728.png","⁵ File/image/Pasted image 20250517172142.png":"⁵-file/image/pasted-image-20250517172142.png","⁵ File/image/Pasted image 20250517190742.png":"⁵-file/image/pasted-image-20250517190742.png","⁵ File/image/Pasted image 20250517193510.png":"⁵-file/image/pasted-image-20250517193510.png","⁵ File/image/Pasted image 20250517210011.png":"⁵-file/image/pasted-image-20250517210011.png","Dev Blog/Jungle/Week 2.md":"dev-blog/jungle/week-2.html"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"displayTitle":"Backlinks","featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"tags":{"featureId":"tags","enabled":true,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"showInlineTags":{"show":true,"description":"Show tags that are inline in the document"},"showFrontmatterTags":{"show":true,"description":"Show tags that are in the frontmatter"}},"alias":{"featureId":"aliases","enabled":true,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"properties":{"featureId":"properties","enabled":true,"displayTitle":"Properties","featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"info_hideProperties":{"show":true,"description":"A list of properties to hide from the properties view"}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"displayTitle":"","featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"info_includePath":{"show":false,"description":"The path on the server from which this feature can be loaded"},"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showDefaultFolderIcons":{"show":true,"description":"Show a default icon of a folder for every folder in the tree"},"info_showDefaultFileIcons":{"show":true,"description":"Show a default icon of a file for every file in the tree"},"info_defaultFolderIcon":{"show":true,"description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon"},"info_defaultFileIcon":{"show":true,"description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon"},"info_defaultMediaIcon":{"show":true,"description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon"},"info_exposeStartingPath":{"show":true,"description":"Whether or not to show the current file in the file tree when the page is first loaded"},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"displayTitle":"Search...","featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"outline":{"featureId":"outline","enabled":true,"displayTitle":"Outline","featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"startCollapsed":false,"minCollapseDepth":0,"info_startCollapsed":{"show":true,"description":"Should the outline start collapsed?"},"info_minCollapseDepth":{"show":true,"description":"The minimum depth at which headings should be collapsed"}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"displayTitle":"","featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."}},"graphView":{"featureId":"graph-view","enabled":false,"displayTitle":"Graph View","featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"description":"Show nodes that are not connected to any other nodes."},"info_showAttachments":{"show":true,"description":"Show attachments like images and PDFs as nodes in the graph."},"info_allowGlobalGraph":{"show":true,"description":"Allow the user to view the global graph of all nodes."},"info_allowExpand":{"show":true,"description":"Allow the user to pop-out the graph view to take up the whole screen"},"info_attractionForce":{"show":true,"description":"How much should linked nodes attract each other? This will make the graph appear more clustered."},"info_linkLength":{"show":true,"description":"How long should the links between nodes be? The shorter the links the closer connected nodes will cluster together."},"info_repulsionForce":{"show":true,"description":"How much should nodes repel each other? This will make the graph appear more spread out."},"info_centralForce":{"show":true,"description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular."},"info_edgePruning":{"show":true,"description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links."},"info_minNodeRadius":{"show":true,"description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes."},"info_maxNodeRadius":{"show":true,"description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes."}},"sidebar":{"featureId":"sidebar","enabled":true,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"20em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"description":"Whether or not to allow the sidebars to be resized"},"info_allowCollapsing":{"show":true,"description":"Whether or not to allow the sidebars to be collapsed"},"info_rightDefaultWidth":{"show":true,"description":"The default width of the right sidebar"},"info_leftDefaultWidth":{"show":true,"description":"The default width of the left sidebar"}},"customHead":{"featureId":"custom-head","enabled":true,"displayTitle":"","featurePlacement":{"selector":"head","type":"start","info_selector":{"show":true,"description":"CSS selector for an element. The feature will be placed relative to this element."},"info_type":{"show":true,"description":"Will this feature be placed before, after, or inside (at the beggining or end).","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"description":"Descriptive title to show above the feature"},"info_featurePlacement":{"show":true,"description":"Where to place this feature on the page. Multiple values will be tried in order until one succeeds. Multiple values will not insert this feature multiple times."},"info_includePath":{"show":false,"description":"The path on the server from which this feature can be loaded"},"sourcePath":"","info_sourcePath":{"show":true,"description":"The local path to the source .html file which will be included.","fileInputOptions":{"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"40em","info_allowFoldingLists":{"show":true,"description":"Whether or not to allow lists to be folded"},"info_allowFoldingHeadings":{"show":true,"description":"Whether or not to allow headings to be folded"},"info_documentWidth":{"show":true,"description":"The width of the document"}}},"modifiedTime":1747972409717,"siteName":"Obsidian","vaultName":"Obsidian","exportRoot":"/","baseURL":"","pluginVersion":"1.9.0-2b","themeName":"","bodyClasses":"publish css-settings-manager mod-windows is-frameless is-hidden-frameless theme-light show-inline-title show-ribbon show-view-header minimal-default-light minimal-default-dark minimal-readable minimal-dark-tonal borders-none colorful-active links-int-on links-ext-on full-width-media img-grid contextual-typography outliner-plugin-dnd trim-cols checkbox-square metadata-heading-off sidebar-tabs-wide tabs-modern minimal-tab-title-visible hide-folder-note folder-note-underline folder-note-underline-path fn-whitespace-stop-collapsing fn-hide-collapse-icon highlightr-realistic is-focused","hasFavicon":false}