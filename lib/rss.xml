<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Obsidian]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://sunha20.github.io/digital-garden/</link><image><url>https://sunha20.github.io/digital-garden/lib/media/favicon.png</url><title>Obsidian</title><link>https://sunha20.github.io/digital-garden/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 29 Oct 2024 23:29:25 GMT</lastBuildDate><atom:link href="https://sunha20.github.io/digital-garden/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 29 Oct 2024 23:29:25 GMT</pubDate><copyright><![CDATA[seonha20]]></copyright><ttl>60</ttl><dc:creator>seonha20</dc:creator><item><title><![CDATA[99클럽 코테 스터디 1일차 TIL 이분탐색]]></title><description><![CDATA[<a class="tag" href="https://sunha20.github.io/digital-garden/?query=tag:99클럽" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#99클럽</a> <a class="tag" href="https://sunha20.github.io/digital-garden/?query=tag:코딩테스트준비" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#코딩테스트준비</a> <a class="tag" href="https://sunha20.github.io/digital-garden/?query=tag:개발자취업" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발자취업</a> <a class="tag" href="https://sunha20.github.io/digital-garden/?query=tag:항해99" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#항해99</a> <a class="tag" href="https://sunha20.github.io/digital-garden/?query=tag:TIL" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#TIL</a> 
 <br><a href="https://sunha20.github.io/digital-garden?query=tag:99클럽" class="tag" target="_blank" rel="noopener nofollow">#99클럽</a> <a href="https://sunha20.github.io/digital-garden?query=tag:코딩테스트준비" class="tag" target="_blank" rel="noopener nofollow">#코딩테스트준비</a> <a href="https://sunha20.github.io/digital-garden?query=tag:개발자취업" class="tag" target="_blank" rel="noopener nofollow">#개발자취업</a> <a href="https://sunha20.github.io/digital-garden?query=tag:항해99" class="tag" target="_blank" rel="noopener nofollow">#항해99</a> <a href="https://sunha20.github.io/digital-garden?query=tag:TIL" class="tag" target="_blank" rel="noopener nofollow">#TIL</a><br><br><br>김형택은 지금 몰래 Spider Solitaire(스파이더 카드놀이)를 하고 있다. 형택이는 이 게임을 이길 때도 있었지만, 질 때도 있었다. 누군가의 시선이 느껴진 형택이는 게임을 중단하고 코딩을 하기 시작했다. 의심을 피했다고 생각한 형택이는 다시 게임을 켰다. 그 때 형택이는 잠시 코딩을 하는 사이에 자신의 게임 실력이 눈에 띄게 향상된 것을 알았다.<br>
이제 형택이는 앞으로의 모든 게임에서 지지 않는다. 하지만, 형택이는 게임 기록을 삭제 할 수 없기 때문에, 자신의 못하던 예전 기록이 현재 자신의 엄청난 실력을 증명하지 못한다고 생각했다.<br>
게임 기록은 다음과 같이 생겼다.<br>
<br>게임 횟수 : X
<br>이긴 게임 : Y (Z%)
<br>Z는 형택이의 승률이고, 소수점은 버린다. 예를 들어, X=53, Y=47이라면, Z=88이다.<br>
X와 Y가 주어졌을 때, 형택이가 게임을 최소 몇 번 더 해야 Z가 변하는지 구하는 프로그램을 작성하시오.
<br><br>각 줄에 정수 X와 Y가 주어진다.<br><br>첫째 줄에 형택이가 게임을 최소 몇 판 더 해야하는지 출력한다. 만약 Z가 절대 변하지 않는다면 -1을 출력한다.<br><br>
<br>1 ≤ X ≤ 1,000,000,000
<br>0 ≤ Y ≤ X
<br><br><br><br>승률이 변하는 지점을 ‘찾는’ 문제 → 배열 탐색 중 <a data-href="이분탐색" href="https://sunha20.github.io/digital-garden/1.-study/coding-test/algorithm/이분탐색.html" class="internal-link" target="_self" rel="noopener nofollow">이분탐색</a> 사용<br>기본 문제처럼 굳이 실제 배열을 만들어서 인덱스로 접근하는 등의 방법을 사용하진 않아도 된다.<br>
hi lo mid 값을 추가 실행 횟수로 설정하여 승률 계산에 사용하는 방법으로 해결함.<br>비교적 큰수를 다루는 문제이면서 나눗셈이 들어가는 문제이다 보니, 컴퓨터 시스템적 제약으로 인한 오류들이 많이 발생했음(overflow나 정밀도 손상과 같은 문제들)<br>
<br>부동소수점 문제

<br>나눈 값이 소수점 아래로 긴 값이라 저장 가능 범위를 넘어선다면, 소수점 데이터에 오차가 발생
<br>거기에 100을 곱한다면 오차가 더 커지게 됨.
<br>→ 100을 먼저 곱하고 나누어서 오차를 줄이는 방법을 사용


<br>정수 오버플로우

<br>위의 문제 해결을 위해 100을 먼저 곱하게 되면, int 형이 수용할 수 없는 값이 생성 될 수 있음.
<br>int 형이 저장할 수 있는 최댓값이 2,147,483,647인데, y 최댓값 1,000,000,000에 100을 곱하면 overflow가 발생
<br>→ 자료형을 long으로 변경: 메모리 많이 사용.
<br>→ double로 계산하고 int로 type casting


<br>// 수정 전
int x = 100;
int y = 80;
// ...
int now = (double) (y+i) / (x+i) * 100; // double로 계산하지 않으면 소숫점 아래는 다 잘려서 잘못된 값이 나옴

// 곱하기 연산을 먼저하는 것으로 수정
int x = 100;
int y = 80;
// ...
int now = (y+i) * 100 / (x+i) ; // 100을 먼저 곱하면 필요한 부분 만큼(0~100)은 제대로 계산되기 때문에 double로 계산하지 않아도 된다고 생각.

// double 형으로 계산
int x = 100;
int y = 80;
// ...
int now = (int) ((double) (y+i)/(x+i) *100);

// 곱하기 연산을 먼저하는 것으로 수정
double x = 100.0;
double y = 80.0;
// ...
int now =(int) ((y+i) * 100/(x+i));

복사<br>해당 주제에 대한 자세한 내용은 <a data-tooltip-position="top" aria-label="숫자 자료형과 계산 오차" data-href="숫자 자료형과 계산 오차" href="https://sunha20.github.io/digital-garden/1.-study/coding-test/etc/숫자-자료형과-계산-오차.html" class="internal-link" target="_self" rel="noopener nofollow">다음 링크</a> 참고<br>+)<br>
<br>승률이 Z보다 작은 경우는 고려하지 않아도됨.
<br><br>import java.io.*;  
  
public class Main {  
    public static void main(String[] args) throws IOException {  
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  
        String[] temp = br.readLine().split(" ");  
        int X = Integer.parseInt(temp[0]);  
        int Y = Integer.parseInt(temp[1]);  
        int Z = (int) ((double) Y * 100 / X);  
        if (Z == 100) {  
            System.out.println(-1);  
            return;  
        }  
  
        int lo = 0;  
        int hi = 1000000000;  
        int mid, now;  
  
        while (lo&lt;hi) {  
            mid = (lo+hi)/2;  
            now = getWinRate(X, Y, mid);  
  
            if (now == Z) {  
                lo = mid + 1;  
                continue;  
            }  
  
            if (now &gt; Z) {  
                hi = mid;  
            }  
        }  
  
        if (getWinRate(X, Y, hi) == Z) System.out.println(-1);  
        else System.out.println(hi);  
    }  
  
    private static int getWinRate(int x, int y, int i) {  
        return (int) ((double) (y+i) * 100/(x+i));  
    }  
}
복사]]></description><link>https://sunha20.github.io/digital-garden/99클럽-코테-스터디-1일차-til-이분탐색.html</link><guid isPermaLink="false">99클럽 코테 스터디 1일차 TIL 이분탐색.md</guid><dc:creator><![CDATA[seonha20]]></dc:creator><pubDate>Tue, 29 Oct 2024 09:41:23 GMT</pubDate></item></channel></rss>